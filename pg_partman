Enabling the pg_partman extension

If you have multiple databases inside the same PostgreSQL DB instance for which you want to manage partitions, enable the pg_partman extension separately for each database. 
To enable the pg_partman extension for a specific database, create the partition maintenance schema and then create the pg_partman extension as follows

CREATE SCHEMA partman;
CREATE EXTENSION pg_partman WITH SCHEMA partman;


For the examples that show using the pg_partman extension, we use the following sample database table and partition. This database uses a partitioned table based on a timestamp.
A schema data_mart contains a table named events with a column named created_at. The following settings are included in the events table:

Primary keys event_id and created_at, which must have the column used to guide the partition.

A check constraint ck_valid_operation to enforce values for an operation table column.

Two foreign keys, where one (fk_orga_membership) points to the external table organization and the other (fk_parent_event_id) is a self-referenced foreign key.

Two indexes, where one (idx_org_id) is for the foreign key and the other (idx_event_type) is for the event type.

The following DDL statements create these objects, which are automatically included on each partition.



CREATE SCHEMA data_mart;
CREATE TABLE data_mart.organization ( org_id BIGSERIAL,
        org_name TEXT,
        CONSTRAINT pk_organization PRIMARY KEY (org_id)  
    );

CREATE TABLE data_mart.events(
        event_id        BIGSERIAL, 
        operation       CHAR(1), 
        value           FLOAT(24), 
        parent_event_id BIGINT, 
        event_type      VARCHAR(25), 
        org_id          BIGSERIAL, 
        created_at      timestamp, 
        CONSTRAINT pk_data_mart_event PRIMARY KEY (event_id, created_at), 
        CONSTRAINT ck_valid_operation CHECK (operation = 'C' OR operation = 'D'), 
        CONSTRAINT fk_orga_membership 
            FOREIGN KEY(org_id) 
            REFERENCES data_mart.organization (org_id),
        CONSTRAINT fk_parent_event_id 
            FOREIGN KEY(parent_event_id, created_at) 
            REFERENCES data_mart.events (event_id,created_at)
    ) PARTITION BY RANGE (created_at);

CREATE INDEX idx_org_id     ON  data_mart.events(org_id);
CREATE INDEX idx_event_type ON  data_mart.events(event_type);



Configuring partitions using the create_parent function

SELECT partman.create_parent( p_parent_table => 'data_mart.events',
 p_control => 'created_at',
 p_type => 'native',
 p_interval=> 'daily',
 p_premake => 30);

 The parameters are as follows:

p_parent_table – The parent partitioned table. This table must already exist and be fully qualified, including the schema.

p_control – The column on which the partitioning is to be based. The data type must be an integer or time-based.

p_type – The type is either 'native' or 'partman'. You typically use the native type for its performance improvements and flexibility. The partman type relies on inheritance.

p_interval – The time interval or integer range for each partition. Example values include daily, hourly, and so on.

p_premake – The number of partitions to create in advance to support new inserts.



Configuring partition maintenance using the run_maintenance_proc function

CREATE EXTENSION pg_cron;

UPDATE partman.part_config 
SET infinite_time_partitions = true,
    retention = '3 months', 
    retention_keep_table=true 
WHERE parent_table = 'data_mart.events';
SELECT cron.schedule('@hourly', $$CALL partman.run_maintenance_proc()$$);



Following, you can find a step-by-step explanation of the preceding example:

Modify the parameter group associated with your DB instance and add pg_cron to the shared_preload_libraries parameter value. This change requires a DB instance restart for it to take effect. For more information, see Modifying parameters in a DB parameter group.

Run the command CREATE EXTENSION pg_cron; using an account that has the rds_superuser permissions. Doing this enables the pg_cron extension. For more information, see Scheduling maintenance with the PostgreSQL pg_cron extension.

Run the command UPDATE partman.part_config to adjust the pg_partman settings for the data_mart.events table.

Run the command SET . . . to configure the data_mart.events table, with these clauses:

infinite_time_partitions = true, – Configures the table to be able to automatically create new partitions without any limit.

retention = '3 months', – Configures the table to have a maximum retention of three months.

retention_keep_table=true – Configures the table so that when the retention period is due, the table isn't deleted automatically. Instead, partitions that are older than the retention period are only detached from the parent table.

Run the command SELECT cron.schedule . . . to make a pg_cron function call. This call defines how often the scheduler runs the pg_partman maintenance procedure, partman.run_maintenance_proc. For this example, the procedure runs every hour.
In My case I will use crontab in linux to schedule the partman.run_maintenance_proc function

* * * * * psql -h your_postgresql_host -U your_postgresql_user -d your_database_name -c "CALL partman.run_maintenance_proc();"


------------------------------------------------------------------Medimpact----Partition------------------------------------------------------------------------------------


CREATE TABLE IF NOT EXISTS mepstg.stg_mep_claim_10r_01new
(
    stg_mep_claim_10r_id bigint NOT NULL DEFAULT nextval('mepstg.stg_mep_claim_10r_stg_mep_claim_10r_id_seq'::regclass),
    created timestamp without time zone NOT NULL,
    created_by character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT CURRENT_USER,
    entered timestamp without time zone NOT NULL,
    entered_by character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT CURRENT_USER,
    stg_mep_claim_file_id bigint,
    stg_load_date date NOT NULL,
    stg_rec_status character varying(20) COLLATE pg_catalog."default",
    stg_error_message character varying(500) COLLATE pg_catalog."default",
    claim_id bigint,
    claimstatus character varying(2) COLLATE pg_catalog."default",
    claimtype character varying(20) COLLATE pg_catalog."default",
    sender_id character varying(100) COLLATE pg_catalog."default",
    receiverid character varying(100) COLLATE pg_catalog."default",
    processorcontrolnumber character varying(100) COLLATE pg_catalog."default",
    binnumber character varying(100) COLLATE pg_catalog."default",
    historicalindicator character varying(5) COLLATE pg_catalog."default",
    historicaldispositionstatus character varying(20) COLLATE pg_catalog."default",
    historicalencountericn character varying(50) COLLATE pg_catalog."default",
    historicalencounterid character varying(50) COLLATE pg_catalog."default",
    administrativedenial character varying(10) COLLATE pg_catalog."default",
    source character varying(100) COLLATE pg_catalog."default",
    claim_encounter_cleanup character varying(100) COLLATE pg_catalog."default",
    filler character varying(100) COLLATE pg_catalog."default",
    submitterlastname character varying(100) COLLATE pg_catalog."default",
    submitterid character varying(100) COLLATE pg_catalog."default",
    submittercontactname character varying(10) COLLATE pg_catalog."default",
    submittercontactnumberqual character varying(2) COLLATE pg_catalog."default",
    submittercontactnumber character varying(20) COLLATE pg_catalog."default",
    submittercontactemailqual character varying(2) COLLATE pg_catalog."default",
    submittercontactemail character varying(100) COLLATE pg_catalog."default",
    receivername character varying(100) COLLATE pg_catalog."default",
    receiverreceiveridentifierqual character varying(2) COLLATE pg_catalog."default",
    receiverreceiveridentifier character varying(100) COLLATE pg_catalog."default",
    billingorg_lastname character varying(100) COLLATE pg_catalog."default",
    billingfirstname character varying(100) COLLATE pg_catalog."default",
    serviceprovideridqual character varying(2) COLLATE pg_catalog."default",
    serviceproviderid character varying(15) COLLATE pg_catalog."default",
    placeofservice character varying(2) COLLATE pg_catalog."default",
    pharmacydispensertypequal character varying(1) COLLATE pg_catalog."default",
    pharmacydispensertype character varying(2) COLLATE pg_catalog."default",
    pharmacyclasscodequal character varying(1) COLLATE pg_catalog."default",
    pharmacyclasscode character varying(1) COLLATE pg_catalog."default",
    innetworkindicator character varying(1) COLLATE pg_catalog."default",
    networkreimbursementid character varying(10) COLLATE pg_catalog."default",
    billingaddressline1 character varying(100) COLLATE pg_catalog."default",
    billingaddressline2 character varying(100) COLLATE pg_catalog."default",
    billingcity character varying(100) COLLATE pg_catalog."default",
    billingstate character varying(100) COLLATE pg_catalog."default",
    billingpostalcode character varying(10) COLLATE pg_catalog."default",
    billingcountry character varying(100) COLLATE pg_catalog."default",
    billingprovideridqual_1 character varying(2) COLLATE pg_catalog."default",
    billingproviderid_1 character varying(100) COLLATE pg_catalog."default",
    billingprovideridqual_2 character varying(2) COLLATE pg_catalog."default",
    billingproviderid_2 character varying(100) COLLATE pg_catalog."default",
    billingproviderspeciality character varying(100) COLLATE pg_catalog."default",
    billingprovidertype character varying(100) COLLATE pg_catalog."default",
    billingprovidercommnoqual_1 character varying(3) COLLATE pg_catalog."default",
    billingprovidercommno_1 character varying(20) COLLATE pg_catalog."default",
    billingprovidercommnoqual_2 character varying(3) COLLATE pg_catalog."default",
    billingprovidercommno_2 character varying(20) COLLATE pg_catalog."default",
    facilityid character varying(20) COLLATE pg_catalog."default",
    serviceproviderchaincode character varying(10) COLLATE pg_catalog."default",
    cmspartddefinedqualfacility character varying(1) COLLATE pg_catalog."default",
    billingcountycode character varying(50) COLLATE pg_catalog."default",
    issuerid character varying(50) COLLATE pg_catalog."default",
    filler_2 character varying(50) COLLATE pg_catalog."default",
    filler_3 character varying(50) COLLATE pg_catalog."default",
    filler_4 character varying(50) COLLATE pg_catalog."default",
    filler_5 character varying(100) COLLATE pg_catalog."default",
    monetaryamountchangeflag character varying(2) COLLATE pg_catalog."default",
    claimsequencenumber character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT stg_mep_claim_10r_new_pkey PRIMARY KEY (stg_mep_claim_10r_id, created)
) PARTITION BY RANGE (created);

ALTER TABLE IF EXISTS mepstg.stg_mep_claim_10r_01new
    OWNER to deployadmin;

REVOKE ALL ON TABLE mepstg.stg_mep_claim_10r_01new FROM mepinfauser_role;
REVOKE ALL ON TABLE mepstg.stg_mep_claim_10r_01new FROM mepstg_query_role;
REVOKE ALL ON TABLE mepstg.stg_mep_claim_10r_01new FROM mepstg_update_role;

GRANT ALL ON TABLE mepstg.stg_mep_claim_10r_01new TO deployadmin;

GRANT ALL ON TABLE mepstg.stg_mep_claim_10r_01new TO dwdba;

GRANT ALL ON TABLE mepstg.stg_mep_claim_10r_01new TO dwdba_role;

GRANT ALL ON TABLE mepstg.stg_mep_claim_10r_01new TO mepdevuser_role;

GRANT UPDATE, DELETE, INSERT, SELECT ON TABLE mepstg.stg_mep_claim_10r_01new TO mepinfauser_role;

GRANT SELECT ON TABLE mepstg.stg_mep_claim_10r_01new TO mepstg_query_role;

GRANT INSERT, SELECT, UPDATE ON TABLE mepstg.stg_mep_claim_10r_01new TO mepstg_update_role;


CREATE UNIQUE INDEX IF NOT EXISTS pk_stg_mep_claim_10r_01new
    ON mepstg.stg_mep_claim_10r_01new USING btree
    (stg_mep_claim_10r_id ASC NULLS LAST, created ASC NULLS LAST);


CREATE INDEX IF NOT EXISTS stg_mep_claim_10r_n1_01new
    ON mepstg.stg_mep_claim_10r_01new USING btree
    (stg_mep_claim_file_id ASC NULLS LAST, claim_id ASC NULLS LAST);


SELECT partman.create_parent( p_parent_table => 'mepstg.stg_mep_claim_10r_01new',
 p_control => 'created',
 p_type => 'range',
 p_interval=> '1 week',
 p_start_partition=> '2023-08-11',
 p_premake => 5);


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#!/bin/bash

# Source the environment file
source /opt/app/localhome/postgres/pg_env.sh

# Retention period (in weeks)
RETENTION_PERIOD=6

# Calculate the date threshold for retention
THRESHOLD_DATE=$(date -d "-$RETENTION_PERIOD weeks" "+%Y-%m-%d %H:%M:%S")

# Build the SQL query to drop old partitions
SQL_QUERY="DO \$\$
BEGIN
   EXECUTE (
      SELECT 'DROP TABLE IF EXISTS archive_schema.' || table_name || ' CASCADE'
      FROM information_schema.tables
      WHERE table_schema = 'archive_schema'
      AND table_name LIKE 'your_prefix_%' -- You can customize this prefix
      AND create_date < '$THRESHOLD_DATE'
   );
END
\$\$;"

# Execute the SQL query using psql with the specified database and retention_schema
psql -h $PG_HOST -p $PG_PORT -d citus -U $PG_USER -c "$SQL_QUERY" -v retention_schema='mepstg_archive'

# Check for errors
if [ $? -eq 0 ]; then
  echo "Dropped archived partitions older than $RETENTION_PERIOD weeks."
else
  echo "Error: Failed to drop partitions."
fi



#!/bin/bash

# Source environment variables
source /opt/app/localhome/svcpostgres/pg_env.sh

# Define the maximum allowed replication lag in seconds
MAX_LAG_SECONDS=0.5  # 0.5 minutes

# Get the replication lag in seconds
replication_lag=$(psql -h localhost -d citus -c "SELECT extract(seconds from (now() - pg_last_xact_replay_timestamp())) AS time_lag;" -t -A)

# Check if replication lag exceeds the threshold
if [ -n "$replication_lag" ] && [ "$(awk 'BEGIN{print ("'$replication_lag'" > "'$MAX_LAG_SECONDS'") ? 1 : 0}')" -eq 1 ]; then
  alert_message="Replication lag is too high: ${replication_lag} seconds."
  echo $alert_message
  # Send an email alert
  echo "$alert_message" | mail -s "Replication Lag Alert" Ngoasong.Fonge@medimpact.com
else
  echo "Replication lag is within acceptable limits: ${replication_lag} seconds."
fi

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
This script bellow captures error logs For example, if the psql command fails to execute, it would be helpful to capture and handle that error and also tells you the server the email message is coming from.

#!/bin/bash

# Source environment variables
source /opt/app/localhome/svcpostgres/pg_env.sh

# Log file
LOG_FILE="/opt/backup/pguatdr1/replication_lag.log"

# Define the maximum allowed replication lag in seconds
MAX_LAG_SECONDS=10  # seconds

# Get the server hostname
SERVER_NAME=$(hostname)

# Get the replication lag in seconds
replication_lag=$(psql -h localhost -d citus -c "SELECT extract(seconds from (now() - pg_last_xact_replay_timestamp())) AS time_lag;" -t -A 2>> "$LOG_FILE")

# Check if the psql command was successful
if [ $? -ne 0 ]; then
  echo "Error executing psql command. Check the log file for details: $LOG_FILE"
  exit 1
fi

# Check if replication lag exceeds the threshold
if [ -n "$replication_lag" ] && [ "$(awk 'BEGIN{print ("'$replication_lag'" > "'$MAX_LAG_SECONDS'") ? 1 : 0}')" -eq 1 ]; then
  alert_message="Server: $SERVER_NAME - Replication lag is too high: ${replication_lag} seconds."
  echo $alert_message
  # Send an email alert using mailx
  echo "$alert_message" | mailx -s "Replication Lag Alert - $SERVER_NAME" Ngoasong.Fonge@medimpact.com
  echo "$alert_message" >> "$LOG_FILE"  # Log the alert
else
  echo "Server: $SERVER_NAME - Replication lag is within acceptable limits: ${replication_lag} seconds."
fi










citus=# vacuum full verbose xray.impact_paths;
INFO:  vacuuming "xray.impact_paths"
INFO:  "xray.impact_paths": found 0 removable, 62839 nonremovable row versions in 2190 pages
DETAIL:  0 dead row versions cannot be removed yet.
CPU: user: 0.22 s, system: 0.03 s, elapsed: 0.28 s.
VACUUM

[svcpostgres@pv2medpgbr1 ~]$ /opt/app/pgbackrest/bin/pgbackrest version
pgBackRest 2.49

git clone https://github.com/laurenz/oracle_fdw.git
-----------------------------------------------------------------------------------------------------------
On pgbackup Server (as svcpostgres user):
# Create .ssh directory
mkdir -m 750 /home/pgbackrest/.ssh

# Generate SSH key pair
ssh-keygen -f /home/pgbackrest/.ssh/id_rsa -t rsa -b 4096 -N ""

On db1 Server (as svcpostgres user):
# Create .ssh directory
mkdir -m 750 -p /var/lib/postgresql/.ssh

# Generate SSH key pair
ssh-keygen -f /var/lib/postgresql/.ssh/id_rsa -t rsa -b 4096 -N ""

Exchange Public Keys:
On pgbackup, add the public key to db1's authorized_keys:
cat /home/pgbackrest/.ssh/id_rsa.pub | ssh postgres@db1 "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

On db1, add the public key to pgbackup's authorized_keys:
cat /var/lib/postgresql/.ssh/id_rsa.pub | ssh pgbackrest@pgbackup "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

After these steps, you should be able to SSH between the servers without being prompted for a password.
Always ensure that the permissions on the ~/.ssh directory and the authorized_keys file are set correctly for security reasons:
# On pgbackup
chmod 700 /home/pgbackrest/.ssh
chmod 600 /home/pgbackrest/.ssh/authorized_keys

# On db1
chmod 700 /var/lib/postgresql/.ssh
chmod 600 /var/lib/postgresql/.ssh/authorized_keys

To test if the SSH setup is working:
From pgbackup to db1:
ssh postgres@db1

From db1 to pgbackup:
ssh pgbackrest@pgbackup

-------------------------------------------------------------------------------------------------------------------------------

https://bun.uptrace.dev/postgres/pgbackrest-s3-backups.html#differential-backup

2023-12-11 11:16:41.848 UTC [10.13.3.56(45684)] [1504535]: [16-1] user=devngcsuser,db=citus,host=10.13.3.56ERROR:  null value in column "answer_text" of relation "answer" violates not-null constraint
2023-12-11 11:16:41.848 UTC [10.13.3.56(45684)] [1504535]: [17-1] user=devngcsuser,db=citus,host=10.13.3.56DETAIL:  Failing row contains (1837, 2023-12-11 11:16:41.843, System, 409, 667, null, null, 0).

-rw------- 1 svcpostgres svcpostgres  11M Dec 11 02:39 postgresql-2023-12-11_000000.log
-rw------- 1 svcpostgres svcpostgres  11M Dec 11 04:32 postgresql-2023-12-11_023944.log
-rw------- 1 svcpostgres svcpostgres 8.3M Dec 11 15:20 postgresql-2023-12-11_043206.log

cat /opt/app/localhome/svcpostgres/.ssh/id_rsa.pub | ssh svcpostgres@qv1medpgc1 "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

 
sudo -iu svcpostgres pgbackrest --stanza=pgqa1 --log-level-console=info stanza-create --pg1-path=/opt/app/postgres-data/data --log-path=/opt/backup/log/pgbackrest
svcpostgres is not in the sudoers file.  This incident will be reported.


sbdme1=# CREATE EXTENSION oracle_fdw SCHEMA dmeapps;
ERROR:  extension "oracle_fdw" is not available
DETAIL:  Could not open extension control file "/opt/app/postgresql-15.1/share/extension/oracle_fdw.control": No such file or directory.
HINT:  The extension must first be installed on the system where PostgreSQL is running.
CONTEXT:  while executing command on dv1meddmepsw1.medimpact.com:5432


sudo ln -s /opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf /etc/pgbackrest/pgbackrest.conf

[svcpostgres@pv2medpgbr1 ~]$ pgbackrest --config=/opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf --stanza=pgqa1 --log-level-console=info stanza-create
2023-12-14 19:00:23.962 P00   INFO: stanza-create command begin 2.49: --config=/opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf --exec-id=794740-7b13964f --log-level-console=info --log-level-file=info --log-path=/opt/backup/log/pgbackrest --pg1-host=qv1medpgc1 --pg2-host=qv1medpgc2 --pg1-path=/opt/app/postgres-data/data --pg2-path=/opt/app/postgres-data/data --pg1-port=5432 --pg2-port=5432 --repo1-path=/opt/backup/pgbackrest --stanza=pgqa1
WARN: unable to check pg1: [UnknownError] remote-0 process on 'qv1medpgc1' terminated unexpectedly [255]: postgres@qv1medpgc1: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).
WARN: unable to check pg2: [UnknownError] remote-0 process on 'qv1medpgc2' terminated unexpectedly [255]: postgres@qv1medpgc2: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).
ERROR: [056]: unable to find primary cluster - cannot proceed
       HINT: are all available clusters in recovery?
2023-12-14 19:00:24.763 P00   INFO: stanza-create command end: aborted with exception [056]
[svcpostgres@pv2medpgbr1 ~]$ pgbackrest --config=/opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf --stanza=pgqa1 --log-level-console=debug stanza-create
2023-12-14 19:01:55.751 P00  DEBUG:     common/io/socket/common::sckInit: (block: false, keepAlive: true, tcpKeepAliveCount: 0, tcpKeepAliveIdle: 0, tcpKeepAliveInterval: 0)
2023-12-14 19:01:55.751 P00  DEBUG:     common/io/socket/common::sckInit: => void
2023-12-14 19:01:55.752 P00   INFO: stanza-create command begin 2.49: --config=/opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf --exec-id=794824-d1f470fd --log-level-console=debug --log-level-file=info --log-path=/opt/backup/log/pgbackrest --pg1-host=qv1medpgc1 --pg2-host=qv1medpgc2 --pg1-path=/opt/app/postgres-data/data --pg2-path=/opt/app/postgres-data/data --pg1-port=5432 --pg2-port=5432 --repo1-path=/opt/backup/pgbackrest --stanza=pgqa1
2023-12-14 19:01:55.752 P00  DEBUG:     common/lock::lockInit: (path: {"/tmp/pgbackrest"}, execId: {"794824-d1f470fd"}, type: 2)
2023-12-14 19:01:55.752 P00  DEBUG:     common/lock::lockInit: => void
2023-12-14 19:01:55.752 P00  DEBUG:     common/lock::lockAcquire: (param.timeout: 0, param.returnOnNoLock: false)
2023-12-14 19:01:55.753 P00  DEBUG:     common/lock::lockAcquire: => true
2023-12-14 19:01:55.753 P00  DEBUG:     config/load::cfgLoad: => void
2023-12-14 19:01:55.753 P00  DEBUG:     command/stanza/create::cmdStanzaCreate: (void)
2023-12-14 19:01:55.753 P00  DEBUG:     command/control/common::lockStopTest: (void)
2023-12-14 19:01:55.753 P00  DEBUG:     storage/storage::storageExists: (this: {type: posix, path: /, write: false}, pathExp: {"/tmp/pgbackrest/pgqa1.stop"}, param.timeout: 0)
2023-12-14 19:01:55.753 P00  DEBUG:     storage/storage::storageInfo: (this: {type: posix, path: /, write: false}, fileExp: {"/tmp/pgbackrest/pgqa1.stop"}, param.level: 3, param.ignoreMissing: true, param.followLink: true, param.noPathEnforce: false)
2023-12-14 19:01:55.753 P00  DEBUG:     storage/storage::storageInfo: => {StorageInfo}
2023-12-14 19:01:55.753 P00  DEBUG:     storage/storage::storageExists: => false
2023-12-14 19:01:55.753 P00  DEBUG:     storage/storage::storageExists: (this: {type: posix, path: /, write: false}, pathExp: {"/tmp/pgbackrest/all.stop"}, param.timeout: 0)
2023-12-14 19:01:55.753 P00  DEBUG:     storage/storage::storageInfo: (this: {type: posix, path: /, write: false}, fileExp: {"/tmp/pgbackrest/all.stop"}, param.level: 3, param.ignoreMissing: true, param.followLink: true, param.noPathEnforce: false)
2023-12-14 19:01:55.753 P00  DEBUG:     storage/storage::storageInfo: => {StorageInfo}
2023-12-14 19:01:55.753 P00  DEBUG:     storage/storage::storageExists: => false
2023-12-14 19:01:55.753 P00  DEBUG:     command/control/common::lockStopTest: => void
2023-12-14 19:01:55.753 P00  DEBUG:     db/helper::dbGet: (primaryOnly: false, primaryRequired: true, standbyRequired: false)
2023-12-14 19:01:55.753 P00  DEBUG:     db/helper::dbGetIdx: (pgIdx: 0)
2023-12-14 19:01:55.753 P00  DEBUG:     protocol/helper::pgIsLocal: (pgIdx: 0)
2023-12-14 19:01:55.753 P00  DEBUG:     protocol/helper::pgIsLocal: => false
2023-12-14 19:01:55.753 P00  DEBUG:     protocol/helper::pgIsLocal: (pgIdx: 0)
2023-12-14 19:01:55.753 P00  DEBUG:     protocol/helper::pgIsLocal: => false
2023-12-14 19:01:55.753 P00  DEBUG:     protocol/helper::protocolRemoteGet: (protocolStorageType: pg, hostIdx: 0)
2023-12-14 19:01:55.753 P00  DEBUG:     protocol/helper::protocolRemoteParamSsh: (protocolStorageType: pg, hostIdx: 0)
2023-12-14 19:01:55.753 P00  DEBUG:     protocol/helper::protocolRemoteParam: (protocolStorageType: pg, hostIdx: 0)
2023-12-14 19:01:55.753 P00  DEBUG:     protocol/helper::protocolRemoteParam: => {["--exec-id=794824-d1f470fd", "--log-level-console=off", "--log-level-file=off", "--log-level-stderr=error", "--pg1-path=/opt/app/postgres-data/data", "--pg1-port=5432", "--process=0", "--remote-type=pg", "--stanza=pgqa1", "stanza-create:remote"]}
2023-12-14 19:01:55.753 P00  DEBUG:     protocol/helper::protocolRemoteParamSsh: => {["-o", "LogLevel=error", "-o", "Compression=no", "-o", "PasswordAuthentication=no", "postgres@qv1medpgc1", "pgbackrest --exec-id=794824-d1f470fd --log-level-console=off --log-level-file=off --log-level-stderr=error --pg1-path=/opt/app/postgres-data/data --pg1-port=5432 --process=0 --remote-type=pg --stanza=pgqa1 stanza-create:remote"]}
2023-12-14 19:01:55.753 P00  DEBUG:     common/exec::execNew: (command: {"ssh"}, param: {["-o", "LogLevel=error", "-o", "Compression=no", "-o", "PasswordAuthentication=no", "postgres@qv1medpgc1", "pgbackrest --exec-id=794824-d1f470fd --log-level-console=off --log-level-file=off --log-level-stderr=error --pg1-path=/opt/app/postgres-data/data --pg1-port=5432 --process=0 --remote-type=pg --stanza=pgqa1 stanza-create:remote"]}, name: {"remote-0 process on 'qv1medpgc1'"}, timeout: 1830000)
2023-12-14 19:01:55.753 P00  DEBUG:     common/exec::execNew: => {Exec}
2023-12-14 19:01:55.753 P00  DEBUG:     common/exec::execOpen: (this: {Exec})
2023-12-14 19:01:55.753 P00  DEBUG:     common/exec::execOpen: => void
WARN: unable to check pg1: [UnknownError] remote-0 process on 'qv1medpgc1' terminated unexpectedly [255]: postgres@qv1medpgc1: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).
2023-12-14 19:01:55.894 P00  DEBUG:     db/helper::dbGetIdx: (pgIdx: 1)
2023-12-14 19:01:55.894 P00  DEBUG:     protocol/helper::pgIsLocal: (pgIdx: 1)
2023-12-14 19:01:55.894 P00  DEBUG:     protocol/helper::pgIsLocal: => false
2023-12-14 19:01:55.894 P00  DEBUG:     protocol/helper::pgIsLocal: (pgIdx: 1)
2023-12-14 19:01:55.894 P00  DEBUG:     protocol/helper::pgIsLocal: => false
2023-12-14 19:01:55.894 P00  DEBUG:     protocol/helper::protocolRemoteGet: (protocolStorageType: pg, hostIdx: 1)
2023-12-14 19:01:55.894 P00  DEBUG:     protocol/helper::protocolRemoteParamSsh: (protocolStorageType: pg, hostIdx: 1)
2023-12-14 19:01:55.894 P00  DEBUG:     protocol/helper::protocolRemoteParam: (protocolStorageType: pg, hostIdx: 1)
2023-12-14 19:01:55.895 P00  DEBUG:     protocol/helper::protocolRemoteParam: => {["--exec-id=794824-d1f470fd", "--log-level-console=off", "--log-level-file=off", "--log-level-stderr=error", "--pg1-path=/opt/app/postgres-data/data", "--pg1-port=5432", "--process=0", "--remote-type=pg", "--stanza=pgqa1", "stanza-create:remote"]}
2023-12-14 19:01:55.895 P00  DEBUG:     protocol/helper::protocolRemoteParamSsh: => {["-o", "LogLevel=error", "-o", "Compression=no", "-o", "PasswordAuthentication=no", "postgres@qv1medpgc2", "pgbackrest --exec-id=794824-d1f470fd --log-level-console=off --log-level-file=off --log-level-stderr=error --pg1-path=/opt/app/postgres-data/data --pg1-port=5432 --process=0 --remote-type=pg --stanza=pgqa1 stanza-create:remote"]}
2023-12-14 19:01:55.895 P00  DEBUG:     common/exec::execNew: (command: {"ssh"}, param: {["-o", "LogLevel=error", "-o", "Compression=no", "-o", "PasswordAuthentication=no", "postgres@qv1medpgc2", "pgbackrest --exec-id=794824-d1f470fd --log-level-console=off --log-level-file=off --log-level-stderr=error --pg1-path=/opt/app/postgres-data/data --pg1-port=5432 --process=0 --remote-type=pg --stanza=pgqa1 stanza-create:remote"]}, name: {"remote-0 process on 'qv1medpgc2'"}, timeout: 1830000)
2023-12-14 19:01:55.895 P00  DEBUG:     common/exec::execNew: => {Exec}
2023-12-14 19:01:55.895 P00  DEBUG:     common/exec::execOpen: (this: {Exec})
2023-12-14 19:01:55.896 P00  DEBUG:     common/exec::execOpen: => void
WARN: unable to check pg2: [UnknownError] remote-0 process on 'qv1medpgc2' terminated unexpectedly [255]: postgres@qv1medpgc2: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).
2023-12-14 19:01:56.039 P00  DEBUG:     command/exit::exitSafe: (result: 0, error: true, signalType: 0)
ERROR: [056]: unable to find primary cluster - cannot proceed
       HINT: are all available clusters in recovery?
       --------------------------------------------------------------------
       If SUBMITTING AN ISSUE please provide the following information:

       version: 2.49
       command: stanza-create
       options: --config=/opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf --exec-id=794824-d1f470fd --log-level-console=debug --log-level-file=info --log-path=/opt/backup/log/pgbackrest --pg1-host=qv1medpgc1 --pg2-host=qv1medpgc2 --pg1-path=/opt/app/postgres-data/data --pg2-path=/opt/app/postgres-data/data --pg1-port=5432 --pg2-port=5432 --repo1-path=/opt/backup/pgbackrest --stanza=pgqa1

       stack trace:
       db/helper.c:dbGet:135:(primaryOnly: false, primaryRequired: true, standbyRequired: false)
       command/stanza/create.c:cmdStanzaCreate:(void)
       main.c:main:(debug log level required for parameters)
       --------------------------------------------------------------------
2023-12-14 19:01:56.039 P00   INFO: stanza-create command end: aborted with exception [056]
2023-12-14 19:01:56.039 P00  DEBUG:     command/exit::exitSafe: => 56
2023-12-14 19:01:56.039 P00  DEBUG:     main::main: => 56



citus=# vacuum full verbose xray.impact_paths;
INFO:  vacuuming "xray.impact_paths"
INFO:  "xray.impact_paths": found 0 removable, 62839 nonremovable row versions in 2190 pages
DETAIL:  0 dead row versions cannot be removed yet.
CPU: user: 0.22 s, system: 0.03 s, elapsed: 0.28 s.
VACUUM

[svcpostgres@pv2medpgbr1 ~]$ /opt/app/pgbackrest/bin/pgbackrest version
pgBackRest 2.49

git clone https://github.com/laurenz/oracle_fdw.git
-----------------------------------------------------------------------------------------------------------
On pgbackup Server (as svcpostgres user):
# Create .ssh directory
mkdir -m 750 /home/pgbackrest/.ssh

# Generate SSH key pair
ssh-keygen -f /home/pgbackrest/.ssh/id_rsa -t rsa -b 4096 -N ""

On db1 Server (as svcpostgres user):
# Create .ssh directory
mkdir -m 750 -p /var/lib/postgresql/.ssh

# Generate SSH key pair
ssh-keygen -f /var/lib/postgresql/.ssh/id_rsa -t rsa -b 4096 -N ""

Exchange Public Keys:
On pgbackup, add the public key to db1's authorized_keys:
cat /home/pgbackrest/.ssh/id_rsa.pub | ssh postgres@db1 "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

On db1, add the public key to pgbackup's authorized_keys:
cat /var/lib/postgresql/.ssh/id_rsa.pub | ssh pgbackrest@pgbackup "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

After these steps, you should be able to SSH between the servers without being prompted for a password.
Always ensure that the permissions on the ~/.ssh directory and the authorized_keys file are set correctly for security reasons:
# On pgbackup
chmod 700 /home/pgbackrest/.ssh
chmod 600 /home/pgbackrest/.ssh/authorized_keys

# On db1
chmod 700 /var/lib/postgresql/.ssh
chmod 600 /var/lib/postgresql/.ssh/authorized_keys

To test if the SSH setup is working:
From pgbackup to db1:
ssh postgres@db1

From db1 to pgbackup:
ssh pgbackrest@pgbackup

2023-12-22 16:31:49.365 P00  DEBUG:     storage/storage::storageList: (this: {type: posix, path: /opt/backup/pgbackrest, write: false}, pathExp: {"<REPO:ARCHIVE>/15-1/0000001B0000001B"}, param.errorOnMissing: false, param.nullOnMissing: false, param.expression: {"^0000001B0000001B00000029-[0-f]{40}(\.gz|\.lz4|\.zst|\.xz|\.bz2){0,1}$"})
2023-12-22 16:31:49.365 P00  DEBUG:     storage/storage::storageNewItr: (this: {type: posix, path: /opt/backup/pgbackrest, write: false}, pathExp: {"<REPO:ARCHIVE>/15-1/0000001B0000001B"}, param.level: 0, param.errorOnMissing: false, param.recurse: false, param.nullOnMissing: false, param.sortOrder: 0, param.expression: {"^0000001B0000001B00000029-[0-f]{40}(\.gz|\.lz4|\.zst|\.xz|\.bz2){0,1}$"}, param.recurse: false)
2023-12-22 16:31:49.365 P00  DEBUG:     storage/iterator::storageItrNew: (driver: *void, path: {"/opt/backup/pgbackrest/archive/pgqa1/15-1/0000001B0000001B"}, level: 4, errorOnMissing: false, nullOnMissing: false, recurse: false, sortOrder: 0, expression: {"^0000001B0000001B00000029-[0-f]{40}(\.gz|\.lz4|\.zst|\.xz|\.bz2){0,1}$"})
2023-12-22 16:31:49.365 P00  DEBUG:     storage/iterator::storageItrNew: => {stack: {size: 0}}
2023-12-22 16:31:49.365 P00  DEBUG:     storage/storage::storageNewItr: => {stack: {size: 0}}
2023-12-22 16:31:49.365 P00  DEBUG:     storage/storage::storageList: => {[]}
2023-12-22 16:32:11.862 P00  DEBUG:     storage/storage::storageList: (this: {type: posix, path: /opt/backup/pgbackrest, write: false}, pathExp: {"<REPO:ARCHIVE>/15-1/0000001B0000001B"}, param.errorOnMissing: false, param.nullOnMissing: false, param.expression: {"^0000001B0000001B00000029-[0-f]{40}(\.gz|\.lz4|\.zst|\.xz|\.bz2){0,1}$"})
2023-12-22 16:32:11.862 P00  DEBUG:     storage/storage::storageNewItr: (this: {type: posix, path: /opt/backup/pgbackrest, write: false}, pathExp: {"<REPO:ARCHIVE>/15-1/0000001B0000001B"}, param.level: 0, param.errorOnMissing: false, param.recurse: false, param.nullOnMissing: false, param.sortOrder: 0, param.expression: {"^0000001B0000001B00000029-[0-f]{40}(\.gz|\.lz4|\.zst|\.xz|\.bz2){0,1}$"}, param.recurse: false)
2023-12-22 16:32:11.862 P00  DEBUG:     storage/iterator::storageItrNew: (driver: *void, path: {"/opt/backup/pgbackrest/archive/pgqa1/15-1/0000001B0000001B"}, level: 4, errorOnMissing: false, nullOnMissing: false, recurse: false, sortOrder: 0, expression: {"^0000001B0000001B00000029-[0-f]{40}(\.gz|\.lz4|\.zst|\.xz|\.bz2){0,1}$"})
2023-12-22 16:32:11.874 P00  DEBUG:     storage/iterator::storageItrNew: => {stack: {size: 0}}
2023-12-22 16:32:11.874 P00  DEBUG:     storage/storage::storageNewItr: => {stack: {size: 0}}
2023-12-22 16:32:11.874 P00  DEBUG:     storage/storage::storageList: => {[]}
2023-12-22 16:32:11.874 P00  DEBUG:     command/exit::exitSafe: (result: 0, error: true, signalType: 0)
ERROR: [082]: WAL segment 0000001B0000001B00000029 was not archived before the 60000ms timeout
       HINT: check the archive_command to ensure that all options are correct (especially --stanza).
       HINT: check the PostgreSQL server log for errors.
       HINT: run the 'start' command if the stanza was previously stopped.
       --------------------------------------------------------------------
       If SUBMITTING AN ISSUE please provide the following information:

       version: 2.49
       command: check
       options: --config=/opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf --exec-id=1261617-f6f385c8 --log-level-console=debug --log-level-file=info --log-path=/opt/backup/log/pgbackrest --pg1-host=qv1medpgc1 --pg2-host=qv1medpgc2 --pg1-host-user=svcpostgres --pg2-host-user=svcpostgres --pg1-path=/opt/app/postgres-data/data --pg2-path=/opt/app/postgres-data/data --pg1-port=5432 --pg2-port=5432 --repo1-path=/opt/backup/pgbackrest --stanza=pgqa1

       stack trace:
       command/archive/find.c:walSegmentFind:197:(this: {WalSegmentFind}, walSegment: {"0000001B0000001B00000029"})
       command/archive/find.c:walSegmentFindOne:(storage: {type: posix, path: /opt/backup/pgbackrest, write: false}, archiveId: {"15-1"}, walSegment: {"0000001B0000001B00000029"}, timeout: 60000)
       command/check/check.c:checkPrimary:(dbGroup: {DbGetResult}, storage: {type: posix, path: /opt/backup/pgbackrest, write: false}, pgVersion: 150000, pgSystemId: 7229588039154074448, cipherType: none)
       command/check/check.c:cmdCheck:(void)
       main.c:main:(debug log level required for parameters)
       --------------------------------------------------------------------
2023-12-22 16:32:11.874 P00   INFO: check command end: aborted with exception [082]
2023-12-22 16:32:11.874 P00  DEBUG:     command/exit::exitSafe: => 82
2023-12-22 16:32:12.075 P00  DEBUG:     main::main: => 82

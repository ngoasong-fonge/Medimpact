Determine the Desired Size: First, you need to decide how much memory you want to allocate to the shared_buffers parameter. In this example, you want to allocate 1GB of memory.

Convert to Kilobytes (KB): Amazon RDS for PostgreSQL uses kilobytes as the unit for the shared_buffers parameter. To convert 1GB to kilobytes, you perform the following conversions:

1 GB = 1024 MB (since 1 GB = 1024 megabytes)
1024 MB = 1024 * 1024 KB (since 1 megabyte = 1024 kilobytes)
1024 * 1024 KB = 1048576 KB
So, 1 GB is equal to 1048576 KB.

Divide by the Unit Size: The shared_buffers parameter is specified in 8KB units. To calculate the value you should set, you divide the total number of kilobytes (calculated in step 2) by the size of each unit, which is 8KB:

1048576 KB / 8 KB = 131072
So, you should set the shared_buffers parameter to 131072 in your Amazon RDS parameter group.

https://dba.stackexchange.com/questions/137297/how-to-set-up-amazon-rds-parameter-group-for-postgres

-------------------------------------------------------------------------------------------------------------

To calculate the value for the wal_buffer parameter in PostgreSQL on Amazon RDS when you want to allocate 16 MB of memory, you can use the following steps:

You want to allocate 16 MB of memory.
The unit of wal_buffer in PostgreSQL is 8 KB.
Here's how you calculate it:

16 MB = 16 * 1024 KB (1 MB = 1024 KB).

So, to allocate 16 MB of memory for the wal_buffer, you need:

(16 * 1024 KB) / 8 KB = 2048

So, you should set the wal_buffer parameter to 2048 in your RDS parameter group to allocate 16 MB of memory for the Write-Ahead Logging (WAL) buffer. 


CREATE TABLE shard.employee (
    employee_id serial ,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department_id INT,
    created_date DATE
);


----------------total--number--of---tables
SELECT count(*) AS num_tables
FROM information_schema.tables
WHERE table_schema = 'your_schema_name'
AND table_type = 'BASE TABLE';

------------------------------------------------without-primary--key---------
SELECT count(*) AS num_tables_no_pk
FROM information_schema.tables
WHERE table_schema = 'your_schema_name'
  AND table_name NOT IN (
    SELECT tc.table_name
    FROM information_schema.table_constraints AS tc
    WHERE tc.table_schema = 'your_schema_name'
      AND tc.constraint_type = 'PRIMARY KEY'
  );

---------------number--of --views
SELECT count(*) AS num_views
FROM information_schema.views
WHERE table_schema = 'your_schema_name';


-------------number 0f stored proce--(functions)
SELECT count(*) AS num_stored_procedures
FROM information_schema.routines
WHERE routine_schema = 'your_schema_name'
AND routine_type = 'FUNCTION';


-----------functions--To get the number of functions (including stored procedures, which are a type of function) in a specific schema

SELECT count(*) AS num_functions
FROM information_schema.routines
WHERE routine_schema = 'your_schema_name';

---------packages----

In PostgreSQL, there's no direct concept of "packages" as there is in some other database systems like Oracle. However, you can achieve similar functionality using schemas to organize related database objects

SELECT COUNT(*) AS num_packages
FROM information_schema.schemata
WHERE schema_name = 'your_schema_name';


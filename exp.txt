

citus=# vacuum full verbose xray.impact_paths;
INFO:  vacuuming "xray.impact_paths"
INFO:  "xray.impact_paths": found 0 removable, 62839 nonremovable row versions in 2190 pages
DETAIL:  0 dead row versions cannot be removed yet.
CPU: user: 0.22 s, system: 0.03 s, elapsed: 0.28 s.
VACUUM

[svcpostgres@pv2medpgbr1 ~]$ /opt/app/pgbackrest/bin/pgbackrest version
pgBackRest 2.49

git clone https://github.com/laurenz/oracle_fdw.git
-----------------------------------------------------------------------------------------------------------
On pgbackup Server (as svcpostgres user):
# Create .ssh directory
mkdir -m 750 /home/pgbackrest/.ssh

# Generate SSH key pair
ssh-keygen -f /home/pgbackrest/.ssh/id_rsa -t rsa -b 4096 -N ""

On db1 Server (as svcpostgres user):
# Create .ssh directory
mkdir -m 750 -p /var/lib/postgresql/.ssh

# Generate SSH key pair
ssh-keygen -f /var/lib/postgresql/.ssh/id_rsa -t rsa -b 4096 -N ""

Exchange Public Keys:
On pgbackup, add the public key to db1's authorized_keys:
cat /home/pgbackrest/.ssh/id_rsa.pub | ssh postgres@db1 "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

On db1, add the public key to pgbackup's authorized_keys:
cat /var/lib/postgresql/.ssh/id_rsa.pub | ssh pgbackrest@pgbackup "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

After these steps, you should be able to SSH between the servers without being prompted for a password.
Always ensure that the permissions on the ~/.ssh directory and the authorized_keys file are set correctly for security reasons:
# On pgbackup
chmod 700 /home/pgbackrest/.ssh
chmod 600 /home/pgbackrest/.ssh/authorized_keys

# On db1
chmod 700 /var/lib/postgresql/.ssh
chmod 600 /var/lib/postgresql/.ssh/authorized_keys

To test if the SSH setup is working:
From pgbackup to db1:
ssh postgres@db1

From db1 to pgbackup:
ssh pgbackrest@pgbackup

-------------------------------------------------------------------------------------------------------------------------------

https://bun.uptrace.dev/postgres/pgbackrest-s3-backups.html#differential-backup

2023-12-11 11:16:41.848 UTC [10.13.3.56(45684)] [1504535]: [16-1] user=devngcsuser,db=citus,host=10.13.3.56ERROR:  null value in column "answer_text" of relation "answer" violates not-null constraint
2023-12-11 11:16:41.848 UTC [10.13.3.56(45684)] [1504535]: [17-1] user=devngcsuser,db=citus,host=10.13.3.56DETAIL:  Failing row contains (1837, 2023-12-11 11:16:41.843, System, 409, 667, null, null, 0).

-rw------- 1 svcpostgres svcpostgres  11M Dec 11 02:39 postgresql-2023-12-11_000000.log
-rw------- 1 svcpostgres svcpostgres  11M Dec 11 04:32 postgresql-2023-12-11_023944.log
-rw------- 1 svcpostgres svcpostgres 8.3M Dec 11 15:20 postgresql-2023-12-11_043206.log

cat /opt/app/localhome/svcpostgres/.ssh/id_rsa.pub | ssh svcpostgres@qv1medpgc1 "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

 
sudo -iu svcpostgres pgbackrest --stanza=pgqa1 --log-level-console=info stanza-create --pg1-path=/opt/app/postgres-data/data --log-path=/opt/backup/log/pgbackrest
svcpostgres is not in the sudoers file.  This incident will be reported.


sbdme1=# CREATE EXTENSION oracle_fdw SCHEMA dmeapps;
ERROR:  extension "oracle_fdw" is not available
DETAIL:  Could not open extension control file "/opt/app/postgresql-15.1/share/extension/oracle_fdw.control": No such file or directory.
HINT:  The extension must first be installed on the system where PostgreSQL is running.
CONTEXT:  while executing command on dv1meddmepsw1.medimpact.com:5432


sudo ln -s /opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf /etc/pgbackrest/pgbackrest.conf

2023-12-14 22:05:03.093 P00   INFO: stanza-create command begin 2.49: --config=/opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf --exec-id=827417-0be7e239 --log-level-console=debug --log-level-file=info --log-path=/opt/backup/log/pgbackrest --pg1-host=qv1medpgc1 --pg2-host=qv1medpgc2 --pg1-host-user=svcpostgres --pg2-host-user=svcpostgres --pg1-path=/opt/app/postgres-data/data --pg2-path=/opt/app/postgres-data/data --pg1-port=5432 --pg2-port=5432 --repo1-path=/opt/backup/pgbackrest --stanza=pgqa1
2023-12-14 22:05:03.372 P00   WARN: unable to check pg1: [UnknownError] remote-0 process on 'qv1medpgc1' terminated unexpectedly [127]: bash: pgbackrest: command not found
2023-12-14 22:05:03.717 P00   WARN: unable to check pg2: [UnknownError] remote-0 process on 'qv1medpgc2' terminated unexpectedly [127]: bash: pgbackrest: command not found
2023-12-14 22:05:03.717 P00  ERROR: [056]: unable to find primary cluster - cannot proceed
                                    HINT: are all available clusters in recovery?
2023-12-14 22:05:03.717 P00   INFO: stanza-create command end: aborted with exception [056]


[global]
# Server repo details
repo1-path=/opt/backup/pgbackrest
repo1-retention-archive-type=full
repo1-retention-full=2
process-max=4
log-path=/opt/backup/log/pgbackrest
log-level-console=info
log-level-file=info
start-fast=y
delta=y
#backup-standby=y

### Clusters and nodes ###
[pgqa1]
pg1-host=qv1medpgc1
pg1-host-user=svcpostgres
pg1-port=5432
pg1-path=/opt/app/postgres-data/data
pg2-host=qv1medpgc2
pg2-host-user=svcpostgres
pg2-port=5432
pg2-path=/opt/app/postgres-data/data
~

# Custom paths to pgBackRest binaries on remote servers
pg1-host-cmd = /path/to/pgbackrest
pg2-host-cmd = /path/to/pgbackrest

[svcpostgres@pv2medpgbr1 ~]$ pgbackrest --config=/opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf --stanza=pgqa1 --log-level-console=info stanza-create
2023-12-14 22:39:12.868 P00   INFO: stanza-create command begin 2.49: --config=/opt/app/pgbackrest-data/pgbackrest/pgbackrest.conf --exec-id=828718-9b869a81 --log-level-console=info --log-level-file=info --log-path=/opt/backup/log/pgbackrest --pg1-host=qv1medpgc1 --pg2-host=qv1medpgc2 --pg1-host-cmd=/opt/app/pgbackrest-2.49/bin/pgbackrest --pg2-host-cmd=/opt/app/pgbackrest-2.49/bin/pgbackrest --pg1-host-user=svcpostgres --pg2-host-user=svcpostgres --pg1-path=/opt/app/postgres-data/data --pg2-path=/opt/app/postgres-data/data --pg1-port=5432 --pg2-port=5432 --repo1-path=/opt/backup/pgbackrest --stanza=pgqa1
WARN: unable to check pg1: [DbConnectError] raised from remote-0 ssh protocol on 'qv1medpgc1': unable to connect to 'dbname='postgres' port=5432': could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket "/var/run/postgresql/.s.PGSQL.5432"?
WARN: unable to check pg2: [DbConnectError] raised from remote-0 ssh protocol on 'qv1medpgc2': unable to connect to 'dbname='postgres' port=5432': could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket "/var/run/postgresql/.s.PGSQL.5432"?
ERROR: [056]: unable to find primary cluster - cannot proceed
       HINT: are all available clusters in recovery?
2023-12-14 22:39:13.718 P00   INFO: stanza-create command end: aborted with exception [056]



citus=# CREATE TABLE IF NOT EXISTS mepstg.mepstg.stg_mep_claim_10r_new
citus-# (
    historicaldispositionstatus character varying(20) COLLATE pg_catalog."default",
citus(#     stg_mep_claim_10r_new_id bigint NOT NULL DEFAULT nextval('mepstg.stg_mep_claim_10r_stg_mep_claim_10r_new_id_seq'::regclass),
citus(#     created timestamp without time zone NOT NULL,
citus(#     created_by character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT CURRENT_USER,
citus(#     entered timestamp without time zone NOT NULL,
citus(#     entered_by character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT CURRENT_USER,
citus(#     stg_mep_claim_file_id bigint,
citus(#     stg_load_date date NOT NULL,
citus(#     stg_rec_status character varying(20) COLLATE pg_catalog."default",
citus(#     stg_error_message character varying(500) COLLATE pg_catalog."default",
citus(#     claim_id bigint,
citus(#     claimstatus character varying(2) COLLATE pg_catalog."default",
citus(#     claimtype character varying(20) COLLATE pg_catalog."default",
citus(#     sender_id character varying(100) COLLATE pg_catalog."default",
citus(#     receiverid character varying(100) COLLATE pg_catalog."default",
citus(#     processorcontrolnumber character varying(100) COLLATE pg_catalog."default",
citus(#     binnumber character varying(100) COLLATE pg_catalog."default",
citus(#     historicalindicator character varying(5) COLLATE pg_catalog."default",
citus(#     historicaldispositionstatus character varying(20) COLLATE pg_catalog."default",
citus(#     historicalencountericn character varying(50) COLLATE pg_catalog."default",
citus(#     historicalencounterid character varying(50) COLLATE pg_catalog."default",
citus(#     administrativedenial character varying(10) COLLATE pg_catalog."default",
citus(#     source character varying(100) COLLATE pg_catalog."default",
citus(#     claim_encounter_cleanup character varying(100) COLLATE pg_catalog."default",
citus(#     filler character varying(100) COLLATE pg_catalog."default",
citus(#     submitterlastname character varying(100) COLLATE pg_catalog."default",
citus(#     submitterid character varying(100) COLLATE pg_catalog."default",
citus(#     submittercontactname character varying(10) COLLATE pg_catalog."default",
citus(#     submittercontactnumberqual character varying(2) COLLATE pg_catalog."default",
citus(#     submittercontactnumber character varying(20) COLLATE pg_catalog."default",
citus(#     submittercontactemailqual character varying(2) COLLATE pg_catalog."default",
citus(#     submittercontactemail character varying(100) COLLATE pg_catalog."default",
citus(#     receivername character varying(100) COLLATE pg_catalog."default",
citus(#     receiverreceiveridentifierqual character varying(2) COLLATE pg_catalog."default",
citus(#     receiverreceiveridentifier character varying(100) COLLATE pg_catalog."default",
citus(#     billingorg_lastname character varying(100) COLLATE pg_catalog."default",
citus(#     billingfirstname character varying(100) COLLATE pg_catalog."default",
citus(#     serviceprovideridqual character varying(2) COLLATE pg_catalog."default",
citus(#     serviceproviderid character varying(15) COLLATE pg_catalog."default",
citus(#     placeofservice character varying(2) COLLATE pg_catalog."default",
citus(#     pharmacydispensertypequal character varying(1) COLLATE pg_catalog."default",
citus(#     pharmacydispensertype character varying(2) COLLATE pg_catalog."default",
citus(#     pharmacyclasscodequal character varying(1) COLLATE pg_catalog."default",
citus(#     pharmacyclasscode character varying(1) COLLATE pg_catalog."default",
citus(#     innetworkindicator character varying(1) COLLATE pg_catalog."default",
citus(#     networkreimbursementid character varying(10) COLLATE pg_catalog."default",
citus(#     billingaddressline1 character varying(100) COLLATE pg_catalog."default",
citus(#     billingaddressline2 character varying(100) COLLATE pg_catalog."default",
citus(#     billingcity character varying(100) COLLATE pg_catalog."default",
citus(#     billingstate character varying(100) COLLATE pg_catalog."default",
citus(#     billingpostalcode character varying(10) COLLATE pg_catalog."default",
citus(#     billingcountry character varying(100) COLLATE pg_catalog."default",
citus(#     billingprovideridqual_1 character varying(2) COLLATE pg_catalog."default",
citus(#     billingproviderid_1 character varying(100) COLLATE pg_catalog."default",
citus(#     billingprovideridqual_2 character varying(2) COLLATE pg_catalog."default",
citus(#     billingproviderid_2 character varying(100) COLLATE pg_catalog."default",
citus(#     billingproviderspeciality character varying(100) COLLATE pg_catalog."default",
citus(#     billingprovidertype character varying(100) COLLATE pg_catalog."default",
citus(#     billingprovidercommnoqual_1 character varying(3) COLLATE pg_catalog."default",
citus(#     billingprovidercommno_1 character varying(20) COLLATE pg_catalog."default",
citus(#     billingprovidercommnoqual_2 character varying(3) COLLATE pg_catalog."default",
citus(#     billingprovidercommno_2 character varying(20) COLLATE pg_catalog."default",
citus(#     facilityid character varying(20) COLLATE pg_catalog."default",
citus(#     serviceproviderchaincode character varying(10) COLLATE pg_catalog."default",
citus(#     cmspartddefinedqualfacility character varying(1) COLLATE pg_catalog."default",
citus(#     billingcountycode character varying(50) COLLATE pg_catalog."default",
citus(#     issuerid character varying(50) COLLATE pg_catalog."default",
citus(#     filler_2 character varying(50) COLLATE pg_catalog."default",
citus(#     filler_3 character varying(50) COLLATE pg_catalog."default",
citus(#     filler_4 character varying(50) COLLATE pg_catalog."default",
citus(#     filler_5 character varying(100) COLLATE pg_catalog."default",
citus(#     monetaryamountchangeflag character varying(2) COLLATE pg_catalog."default",
citus(#     claimsequencenumber character varying(20) COLLATE pg_catalog."default",
citus(#     CONSTRAINT stg_mep_claim_10r_new_pkey PRIMARY KEY (stg_mep_claim_10r_new_id)
citus(# )
citus-#
citus-# WITH (
citus(#     autovacuum_enabled = TRUE
citus(# )
citus-# PARTITION BY RANGE (created);
ERROR:  syntax error at or near "PARTITION"
LINE 80: PARTITION BY RANGE (created);
         ^



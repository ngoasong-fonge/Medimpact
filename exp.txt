

+ Citus cluster: pgdev2 -----------+--------+---------+----+-----------+
| Group | Member      | Host       | Role   | State   | TL | Lag in MB |
+-------+-------------+------------+--------+---------+----+-----------+
|     0 | dv1medpg1c1 | 10.13.3.47 | Leader | running |  1 |           |
|     1 | dv1medpg1w1 | 10.13.3.48 | Leader | running |  1 |           |
|     2 | dv1medpg1w2 | 10.13.3.49 | Leader | running |  1 |           |
|     3 | dv1medpg1w3 | 10.13.3.50 | Leader | running |  1 |           |
|     4 | dv1medpg1w4 | 10.13.3.51 | Leader | running |  1 |           |
+-------+-------------+------------+--------+---------+----+-----------+
-- Create a table with the usual PostgreSQL syntax
CREATE TABLE users_table (user_id bigserial primary key, age int);

-- Convert the table to a distributed table
SELECT create_distributed_table('users_table', 'user_id');

-- load data, ingest happens in parallel across shards
INSERT INTO users_table (age)
       SELECT 20 + (random() * 70)::int
       FROM generate_series(0, 100000);

-- this query runs in parallel across all shards
SELECT avg(age) FROM users_table;

-- index created in parallel across all shards
CREATE INDEX user_age ON users_table (age);

-- this query hits a single shard as sharding key is on WHERE clause
SELECT age FROM users_table WHERE user_id = 15;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE TABLE shard.users_table (user_id bigserial primary key, age int);

SELECT create_distributed_table('shard.users_table', 'user_id');


CREATE TABLE employee (
    employee_id serial PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department_id INT
);


INSERT INTO shard.users_table (age)
       SELECT 20 + (random() * 70)::int
       FROM generate_series(0, 100000);

SELECT avg(age) FROM shard.users_table;


-- Insert 500,000 records into the distributed table
INSERT INTO shard.users_table (age)
       SELECT 20 + (random() * 70)::int
       FROM generate_series(0, 499999); -- Insert 500,000 records

--------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE shard.t_shard (
id          serial, 
shard_key   int, 
n           int, 
placeholder char(100) DEFAULT 'a');

SELECT create_distributed_table('shard.t_shard', 'shard_key');

INSERT INTO shard.t_shard (shard_key, n) 
SELECT  id % 16, random()*100000 
FROM        generate_series(1, 5000000) AS id;


CREATE INDEX user_age ON shard.shard_table (age);


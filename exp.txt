Please create the tables exposures_by_cycle_period_schema and task_edited_schema in the standalone Postgres in prod and try loading these files
 
Both of them have the '|' delimiter
 
not the comma
 
"The one that is 113KB is task_edited and the other one is exposures_by_cycle_period. Both are using the piping operator as the delimiter "
 
COPY exposures_by_cycle_period_schema FROM '/path/to/exposures_by_cycle_period_file' DELIMITER '|' CSV HEADER;

COPY task_edited_schema FROM '/path/to/task_edited_file' DELIMITER '|' CSV HEADER;

psql -U your_username -d your_database -f exposures_by_cycle_period_schema.sql
psql -U your_username -d your_database -f task_edited_schema.sql

[svcpostgres@pv2medpg3db1 foundry]$ psql -d archive -f exposures_by_cycle_period_schema.sql
psql:exposures_by_cycle_period_schema.sql:67: ERROR:  syntax error at or near ","
LINE 12:     plan_year, T.IntegerType()),
                      ^
[svcpostgres@pv2medpg3db1 foundry]$ cat exposures_by_cycle_period_schema.sql
create table  foundry.exposures_by_cycle_period_schema(
    id varchar(4000),
    contract_id varchar(4000),
    contract_organization_id varchar(4000),
    line_of_business varchar(4000),
    source varchar(4000),
    cycle_period_date varchar(4000),
    cycle_period_date_string varchar(4000),
    guarantee_period_id varchar(4000),
    guarantee_period_effective_date varchar(4000),
    guarantee_period_expiration_date varchar(4000),
    plan_year, T.IntegerType()),
    level varchar(4000),
    level_order, T.IntegerType()),
    level_display_string varchar(4000),
    guarantee_category_type varchar(4000),
    guarantee_category_id varchar(4000),
    guarantee_category_name varchar(4000),
    report_category_id varchar(4000),
    report_category varchar(4000),
    reporting_exclusion_id varchar(4000),
    reporting_exclusion_name varchar(4000),
    carrier_id varchar(4000),
    channel_id varchar(4000),
    channel_name varchar(4000),
    category varchar(4000),
    guarantee_type varchar(4000),
    rate_id varchar(4000),
    contract_executed, T.BooleanType()),
    contract_effective_date varchar(4000),
    contract_expiration_date varchar(4000),
    first_full_reconciliation_period_start_date varchar(4000),
    contract_annual_reconciliation_length, T.DoubleType()),
    contract_co-pay_differential, T.DoubleType()),
    contract_eligibility_threshold, T.DoubleType()),
    contract_reconciliation_period_length, T.DoubleType()),
    rebate_annual_reconciliation_length, T.DoubleType()),
    rebate_co-pay_differential, T.DoubleType()),
    rebate_reconciliation_period, T.DoubleType()),
    contract_eligibility_threshold_basis varchar(4000),
    contract_eligibility_threshold_frequency varchar(4000),
    contract_exposure_cap varchar(4000),
    contract_exposure_cap_basis varchar(4000),
    contract_exposure_offset varchar(4000),
    pharmacy_aggregation_level varchar(4000),
    pharmacy_exposure_cap varchar(4000),
    pharmacy_exposure_cap_basis varchar(4000),
    pharmacy_exposure_offset varchar(4000),
    rebate_aggregation_level varchar(4000),
    rebate_exposure_cap varchar(4000),
    rebate_exposure_cap_basis varchar(4000),
    rebate_exposure_offset varchar(4000),
    rebate_payout_period varchar(4000),
    rebate_pricing_type varchar(4000),
    has_rebate_guarantee_rates, T.BooleanType()),
    has_rebate_passthrough_rates, T.BooleanType()),
    net_rx_count, T.LongType()),
    admin_fee, T.DoubleType()),
    incremental_admin_fee, T.DoubleType()),
    guaranteed_exposure_exposure_cap, T.DoubleType()),
    guaranteed_exposure_no_cap, T.DoubleType()),
    guaranteed_exposure, T.DoubleType()),
    incremental_guaranteed_exposure, T.DoubleType()),
    incremental_guaranteed_exposure_exposure_cap, T.DoubleType()),
    incremental_guaranteed_exposure_no_cap, T.DoubleType()),
    incremental_net_rx_count, T.LongType())
);



To eliminate the statement: log entries and only keep the AUDIT: entries, you can adjust your PostgreSQL logging settings to stop logging SQL statements for specific users (such as auditor), or you can fine-tune the pg_audit configuration.

Option 1: Modify PostgreSQL log_statement Configuration
Disable log_statement for the auditor user: You can control the verbosity of the log entries for specific users by adjusting the log_statement setting. By default, log_statement is set to all or ddl or mod (depending on your configuration).

You can disable statement logging for the auditor user by setting log_statement to none for that user.



citus=# vacuum full verbose xray.impact_paths;
INFO:  vacuuming "xray.impact_paths"
INFO:  "xray.impact_paths": found 0 removable, 62839 nonremovable row versions in 2190 pages
DETAIL:  0 dead row versions cannot be removed yet.
CPU: user: 0.22 s, system: 0.03 s, elapsed: 0.28 s.
VACUUM

[svcpostgres@pv2medpgbr1 ~]$ /opt/app/pgbackrest/bin/pgbackrest version
pgBackRest 2.49

git clone https://github.com/laurenz/oracle_fdw.git
-----------------------------------------------------------------------------------------------------------
On pgbackup Server (as svcpostgres user):
# Create .ssh directory
mkdir -m 750 /home/pgbackrest/.ssh

# Generate SSH key pair
ssh-keygen -f /home/pgbackrest/.ssh/id_rsa -t rsa -b 4096 -N ""

On db1 Server (as svcpostgres user):
# Create .ssh directory
mkdir -m 750 -p /var/lib/postgresql/.ssh

# Generate SSH key pair
ssh-keygen -f /var/lib/postgresql/.ssh/id_rsa -t rsa -b 4096 -N ""

Exchange Public Keys:
On pgbackup, add the public key to db1's authorized_keys:
cat /home/pgbackrest/.ssh/id_rsa.pub | ssh postgres@db1 "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

On db1, add the public key to pgbackup's authorized_keys:
cat /var/lib/postgresql/.ssh/id_rsa.pub | ssh pgbackrest@pgbackup "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"

After these steps, you should be able to SSH between the servers without being prompted for a password.
Always ensure that the permissions on the ~/.ssh directory and the authorized_keys file are set correctly for security reasons:
# On pgbackup
chmod 700 /home/pgbackrest/.ssh
chmod 600 /home/pgbackrest/.ssh/authorized_keys

# On db1
chmod 700 /var/lib/postgresql/.ssh
chmod 600 /var/lib/postgresql/.ssh/authorized_keys

To test if the SSH setup is working:
From pgbackup to db1:
ssh postgres@db1

From db1 to pgbackup:
ssh pgbackrest@pgbackup

-------------------------------------------------------------------------------------------------------------------------------

citus=# CREATE TABLE IF NOT EXISTS mepstg.stg_mep_claim_10r_new
citus-# (
citus(#     stg_mep_claim_10r_id bigint NOT NULL DEFAULT nextval('mepstg.stg_mep_claim_10r_stg_mep_claim_10r_id_seq'::regclass),
citus(#     created timestamp without time zone NOT NULL,
    historicalencountericn character varying(50) COLLATE pg_catalog."default",
    historicalencounterid character varying(50) COLLATE pg_catalog."default",
citus(#     created_by character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT CURRENT_USER,
citus(#     entered timestamp without time zone NOT NULL,
citus(#     entered_by character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT CURRENT_USER,
citus(#     stg_mep_claim_file_id bigint,
citus(#     stg_load_date date NOT NULL,
citus(#     stg_rec_status character varying(20) COLLATE pg_catalog."default",
citus(#     stg_error_message character varying(500) COLLATE pg_catalog."default",
citus(#     claim_id bigint,
citus(#     claimstatus character varying(2) COLLATE pg_catalog."default",
citus(#     claimtype character varying(20) COLLATE pg_catalog."default",
citus(#     sender_id character varying(100) COLLATE pg_catalog."default",
citus(#     receiverid character varying(100) COLLATE pg_catalog."default",
citus(#     processorcontrolnumber character varying(100) COLLATE pg_catalog."default",
citus(#     binnumber character varying(100) COLLATE pg_catalog."default",
citus(#     historicalindicator character varying(5) COLLATE pg_catalog."default",
citus(#     historicaldispositionstatus character varying(20) COLLATE pg_catalog."default",
citus(#     historicalencountericn character varying(50) COLLATE pg_catalog."default",
citus(#     historicalencounterid character varying(50) COLLATE pg_catalog."default",
citus(#     administrativedenial character varying(10) COLLATE pg_catalog."default",
citus(#     source character varying(100) COLLATE pg_catalog."default",
citus(#     claim_encounter_cleanup character varying(100) COLLATE pg_catalog."default",
citus(#     filler character varying(100) COLLATE pg_catalog."default",
citus(#     submitterlastname character varying(100) COLLATE pg_catalog."default",
citus(#     submitterid character varying(100) COLLATE pg_catalog."default",
citus(#     submittercontactname character varying(10) COLLATE pg_catalog."default",
citus(#     submittercontactnumberqual character varying(2) COLLATE pg_catalog."default",
citus(#     submittercontactnumber character varying(20) COLLATE pg_catalog."default",
citus(#     submittercontactemailqual character varying(2) COLLATE pg_catalog."default",
citus(#     submittercontactemail character varying(100) COLLATE pg_catalog."default",
citus(#     receivername character varying(100) COLLATE pg_catalog."default",
citus(#     receiverreceiveridentifierqual character varying(2) COLLATE pg_catalog."default",
citus(#     receiverreceiveridentifier character varying(100) COLLATE pg_catalog."default",
citus(#     billingorg_lastname character varying(100) COLLATE pg_catalog."default",
citus(#     billingfirstname character varying(100) COLLATE pg_catalog."default",
citus(#     serviceprovideridqual character varying(2) COLLATE pg_catalog."default",
citus(#     serviceproviderid character varying(15) COLLATE pg_catalog."default",
citus(#     placeofservice character varying(2) COLLATE pg_catalog."default",
citus(#     pharmacydispensertypequal character varying(1) COLLATE pg_catalog."default",
citus(#     pharmacydispensertype character varying(2) COLLATE pg_catalog."default",
citus(#     pharmacyclasscodequal character varying(1) COLLATE pg_catalog."default",
citus(#     pharmacyclasscode character varying(1) COLLATE pg_catalog."default",
citus(#     innetworkindicator character varying(1) COLLATE pg_catalog."default",
citus(#     networkreimbursementid character varying(10) COLLATE pg_catalog."default",
citus(#     billingaddressline1 character varying(100) COLLATE pg_catalog."default",
citus(#     billingaddressline2 character varying(100) COLLATE pg_catalog."default",
citus(#     billingcity character varying(100) COLLATE pg_catalog."default",
citus(#     billingstate character varying(100) COLLATE pg_catalog."default",
citus(#     billingpostalcode character varying(10) COLLATE pg_catalog."default",
citus(#     billingcountry character varying(100) COLLATE pg_catalog."default",
citus(#     billingprovideridqual_1 character varying(2) COLLATE pg_catalog."default",
citus(#     billingproviderid_1 character varying(100) COLLATE pg_catalog."default",
citus(#     billingprovideridqual_2 character varying(2) COLLATE pg_catalog."default",
citus(#     billingproviderid_2 character varying(100) COLLATE pg_catalog."default",
citus(#     billingproviderspeciality character varying(100) COLLATE pg_catalog."default",
citus(#     billingprovidertype character varying(100) COLLATE pg_catalog."default",
citus(#     billingprovidercommnoqual_1 character varying(3) COLLATE pg_catalog."default",
citus(#     billingprovidercommno_1 character varying(20) COLLATE pg_catalog."default",
citus(#     billingprovidercommnoqual_2 character varying(3) COLLATE pg_catalog."default",
citus(#     billingprovidercommno_2 character varying(20) COLLATE pg_catalog."default",
citus(#     facilityid character varying(20) COLLATE pg_catalog."default",
citus(#     serviceproviderchaincode character varying(10) COLLATE pg_catalog."default",
citus(#     cmspartddefinedqualfacility character varying(1) COLLATE pg_catalog."default",
citus(#     billingcountycode character varying(50) COLLATE pg_catalog."default",
citus(#     issuerid character varying(50) COLLATE pg_catalog."default",
citus(#     filler_2 character varying(50) COLLATE pg_catalog."default",
citus(#     filler_3 character varying(50) COLLATE pg_catalog."default",
citus(#     filler_4 character varying(50) COLLATE pg_catalog."default",
citus(#     filler_5 character varying(100) COLLATE pg_catalog."default",
citus(#     monetaryamountchangeflag character varying(2) COLLATE pg_catalog."default",
citus(#     claimsequencenumber character varying(20) COLLATE pg_catalog."default",
citus(#     CONSTRAINT stg_mep_claim_10r_pkey PRIMARY KEY (stg_mep_claim_10r_id)
citus(# ) PARTITION BY RANGE (created);
ERROR:  unique constraint on partitioned table must include all partitioning columns
DETAIL:  PRIMARY KEY constraint on table "stg_mep_claim_10r_new" lacks column "created" which is part of the partition key.
citus=#

-- create the reference tables

CREATE TABLE insert_target (
  value text
);
CREATE TABLE audit_table(
  author name NOT NULL,
  value text
);
SELECT create_reference_table('insert_target');
SELECT create_reference_table('audit_table');

To make a trigger on each worker that updates audit_table, we need to know the name of that tableâ€™s shard. Rather than looking up the name in the metadata tables and using it manually in run_command_on_workers, we can use run_command_on_placements. Reference tables have exactly one placement per worker node, so the following creates what we want.

SELECT run_command_on_placements(
  'audit_table',
  $cmd$
    CREATE OR REPLACE FUNCTION process_audit() RETURNS TRIGGER AS $$
      BEGIN
        INSERT INTO %s (author,value)
          VALUES (current_user,NEW.value);
        RETURN NEW;
      END;
    $$ LANGUAGE plpgsql;
  $cmd$
);

SELECT run_command_on_placements(
  'insert_target',
  $cmd$
    CREATE TRIGGER emp_audit
    AFTER INSERT OR UPDATE ON %s
      FOR EACH ROW EXECUTE PROCEDURE process_audit();
  $cmd$
);

INSERT INTO insert_target (value) VALUES ('inserted value');

TABLE audit_table;

==================

Considering the workaround above to create trigger between two refernce tables, can you create bellow two refrence tables smartiq.account and smartiq.account_hist using the table definition I provided and try to use the trigger trg_account_hist modifying it to suite above scenario  


CREATE TABLE IF NOT EXISTS smartiq.account
(
    account_id bigint NOT NULL DEFAULT nextval('smartiq.account_account_id_seq'::regclass),
    entered timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    entered_by character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT CURRENT_USER,
    client_id bigint NOT NULL,
    account_name character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    account_code character varying(1000) COLLATE pg_catalog."default",
    account_desc character varying(9000) COLLATE pg_catalog."default",
    account_type smallint NOT NULL,
    status smallint NOT NULL,
    version integer NOT NULL,
    effective_date timestamp without time zone,
    CONSTRAINT account_pkey PRIMARY KEY (account_id),
    CONSTRAINT dfk_account_client FOREIGN KEY (client_id)
        REFERENCES smartiq.client (client_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;


CREATE OR REPLACE TRIGGER trg_account_hist
    AFTER INSERT OR DELETE OR UPDATE 
    ON smartiq.account
    FOR EACH ROW
    EXECUTE FUNCTION smartiq.tfn_account_hist();


CREATE TABLE IF NOT EXISTS smartiq.account_hist
(
    account_hist_id bigint NOT NULL DEFAULT nextval('smartiq.account_hist_account_hist_id_seq'::regclass),
    entered timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    entered_by character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT CURRENT_USER,
    replaced timestamp without time zone NOT NULL,
    replaced_by character varying(100) COLLATE pg_catalog."default",
    account_id bigint NOT NULL,
    client_id bigint NOT NULL,
    account_name character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    account_code character varying(1000) COLLATE pg_catalog."default",
    account_desc character varying(9000) COLLATE pg_catalog."default",
    account_type smallint NOT NULL,
    status smallint NOT NULL,
    version integer NOT NULL,
    effective_date timestamp without time zone,
    CONSTRAINT account_hist_pkey PRIMARY KEY (account_hist_id)
)

TABLESPACE pg_default;





==============================================


-- Create the account table
CREATE TABLE IF NOT EXISTS smartiq.account (
    account_id bigint NOT NULL DEFAULT nextval('smartiq.account_account_id_seq'::regclass),
    entered timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    entered_by character varying(100) NOT NULL DEFAULT CURRENT_USER,
    client_id bigint NOT NULL,
    account_name character varying(1000) NOT NULL,
    account_code character varying(1000),
    account_desc character varying(9000),
    account_type smallint NOT NULL,
    status smallint NOT NULL,
    version integer NOT NULL,
    effective_date timestamp without time zone,
    CONSTRAINT account_pkey PRIMARY KEY (account_id)
) TABLESPACE pg_default;

-- Distribute the account table as a reference table
SELECT create_reference_table('smartiq.account');

-- Create the account_hist table
CREATE TABLE IF NOT EXISTS smartiq.account_hist (
    account_hist_id bigint NOT NULL DEFAULT nextval('smartiq.account_hist_account_hist_id_seq'::regclass),
    entered timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    entered_by character varying(100) NOT NULL DEFAULT CURRENT_USER,
    replaced timestamp without time zone NOT NULL,
    replaced_by character varying(100),
    account_id bigint NOT NULL,
    client_id bigint NOT NULL,
    account_name character varying(1000) NOT NULL,
    account_code character varying(1000),
    account_desc character varying(9000),
    account_type smallint NOT NULL,
    status smallint NOT NULL,
    version integer NOT NULL,
    effective_date timestamp without time zone,
    CONSTRAINT account_hist_pkey PRIMARY KEY (account_hist_id)
) TABLESPACE pg_default;

-- Distribute the account_hist table as a reference table
SELECT create_reference_table('smartiq.account_hist');




SELECT run_command_on_placements(
  'smartiq.account_hist',
  $cmd$
    CREATE OR REPLACE FUNCTION smartiq.tfn_account_hist() RETURNS TRIGGER AS $$
    BEGIN
      IF (TG_OP = 'INSERT') THEN
        INSERT INTO %s (entered, entered_by, replaced, replaced_by, account_id, client_id, account_name, 
                        account_code, account_desc, account_type, status, version, effective_date)
        VALUES (NEW.entered, NEW.entered_by, CURRENT_TIMESTAMP, current_user, NEW.account_id, NEW.client_id, 
                NEW.account_name, NEW.account_code, NEW.account_desc, NEW.account_type, 
                NEW.status, NEW.version, NEW.effective_date);
      ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO %s (entered, entered_by, replaced, replaced_by, account_id, client_id, account_name, 
                        account_code, account_desc, account_type, status, version, effective_date)
        VALUES (OLD.entered, OLD.entered_by, CURRENT_TIMESTAMP, current_user, OLD.account_id, OLD.client_id, 
                OLD.account_name, OLD.account_code, OLD.account_desc, OLD.account_type, 
                OLD.status, OLD.version, OLD.effective_date);
      ELSIF (TG_OP = 'DELETE') THEN
        INSERT INTO %s (entered, entered_by, replaced, replaced_by, account_id, client_id, account_name, 
                        account_code, account_desc, account_type, status, version, effective_date)
        VALUES (OLD.entered, OLD.entered_by, CURRENT_TIMESTAMP, current_user, OLD.account_id, OLD.client_id, 
                OLD.account_name, OLD.account_code, OLD.account_desc, OLD.account_type, 
                OLD.status, OLD.version, OLD.effective_date);
      END IF;
      RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
  $cmd$
);


SELECT run_command_on_placements(
  'smartiq.account',
  $cmd$
    CREATE TRIGGER trg_account_hist
    AFTER INSERT OR UPDATE OR DELETE ON %s
    FOR EACH ROW EXECUTE PROCEDURE smartiq.tfn_account_hist();
  $cmd$
);

===============

The trigger function will insert a record into the smartiq.account_hist table whenever an INSERT, UPDATE, or DELETE occurs on the smartiq.account table.

Explanation
Reference Tables: Both smartiq.account and smartiq.account_hist are distributed as reference tables, making them accessible on all worker nodes.
Trigger Function: The trigger function smartiq.tfn_account_hist inserts records into the smartiq.account_hist table whenever an operation is performed on smartiq.account.
Trigger Creation: The trigger is created on all placements of the smartiq.account table using the run_command_on_placements() function.

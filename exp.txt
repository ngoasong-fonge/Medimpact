-- create the reference tables

CREATE TABLE insert_target (
  value text
);
CREATE TABLE audit_table(
  author name NOT NULL,
  value text
);
SELECT create_reference_table('insert_target');
SELECT create_reference_table('audit_table');

To make a trigger on each worker that updates audit_table, we need to know the name of that tableâ€™s shard. Rather than looking up the name in the metadata tables and using it manually in run_command_on_workers, we can use run_command_on_placements. Reference tables have exactly one placement per worker node, so the following creates what we want.

SELECT run_command_on_placements(
  'audit_table',
  $cmd$
    CREATE OR REPLACE FUNCTION process_audit() RETURNS TRIGGER AS $$
      BEGIN
        INSERT INTO %s (author,value)
          VALUES (current_user,NEW.value);
        RETURN NEW;
      END;
    $$ LANGUAGE plpgsql;
  $cmd$
);

SELECT run_command_on_placements(
  'insert_target',
  $cmd$
    CREATE TRIGGER emp_audit
    AFTER INSERT OR UPDATE ON %s
      FOR EACH ROW EXECUTE PROCEDURE process_audit();
  $cmd$
);

INSERT INTO insert_target (value) VALUES ('inserted value');

TABLE audit_table;

==================

CREATE TABLE IF NOT EXISTS shard7.account (
    account_id bigint NOT NULL DEFAULT nextval('shard7.account_account_id_seq'::regclass),
    entered timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    entered_by character varying(100) NOT NULL DEFAULT CURRENT_USER,
    client_id bigint NOT NULL,
    account_name character varying(1000) NOT NULL,
    account_code character varying(1000),
    account_desc character varying(9000),
    account_type smallint NOT NULL,
    status smallint NOT NULL,
    version integer NOT NULL,
    effective_date timestamp without time zone,
    CONSTRAINT account_pkey PRIMARY KEY (account_id)
) TABLESPACE pg_default;


CREATE TABLE IF NOT EXISTS shard7.account_hist (
    account_hist_id bigint NOT NULL DEFAULT nextval('shard7.account_hist_account_hist_id_seq'::regclass),
    entered timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    entered_by character varying(100) NOT NULL DEFAULT CURRENT_USER,
    replaced timestamp without time zone NOT NULL,
    replaced_by character varying(100),
    account_id bigint NOT NULL,
    client_id bigint NOT NULL,
    account_name character varying(1000) NOT NULL,
    account_code character varying(1000),
    account_desc character varying(9000),
    account_type smallint NOT NULL,
    status smallint NOT NULL,
    version integer NOT NULL,
    effective_date timestamp without time zone,
    CONSTRAINT account_hist_pkey PRIMARY KEY (account_hist_id)
) TABLESPACE pg_default;



SELECT run_command_on_placements(
  'shard7.account_hist',
  $cmd$
    CREATE OR REPLACE FUNCTION shard7.tfn_account_hist() RETURNS TRIGGER AS $$
      BEGIN
        INSERT INTO %s (entered, entered_by, replaced, replaced_by, account_id, client_id, account_name, 
                        account_code, account_desc, account_type, status, version, effective_date)
          VALUES (current_user,NEW.value);
        RETURN NEW;
      END;
    $$ LANGUAGE plpgsql;
  $cmd$
);



SELECT run_command_on_placements(
  'shard7.account',
  $cmd$
    CREATE TRIGGER trg_account_hist
    AFTER INSERT OR UPDATE OR DELETE ON %s
    FOR EACH ROW EXECUTE PROCEDURE shard7.tfn_account_hist()
  $cmd$
);


INSERT INTO shard7.account 

TABLE account_hist;


=================================

INSERT INTO shard7.account (
    account_id, 
    entered, 
    entered_by, 
    client_id, 
    account_name, 
    account_code, 
    account_desc, 
    account_type, 
    status, 
    version, 
    effective_date
) VALUES (
    1,
    CURRENT_TIMESTAMP,
    'test_user',
    12345,
    'Test Account',
    'TST123',
    'This is a test account description.',
    1,
    1,
    1,
    CURRENT_TIMESTAMP
);


UPDATE shard7.account
SET account_name = 'Updated Account Name',
    account_desc = 'Updated description.',
    version = version + 1
WHERE account_id = 1;



DELETE FROM shard7.account
WHERE account_id = 1;


SELECT * FROM shard7.account_hist;


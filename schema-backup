

#!/bin/bash

# Source the environment file
source /opt/app/localhome/postgres/pg_env.sh

# Specify backup and log file locations
backup_location="/opt/backup"
log_location="/opt/backup/schemabackup_restore_log.txt"
original_schema="mepstg"  # Replace with your original schema name
new_schema="newmepstg"    # Replace with your desired new schema name

# Record the start time
start_time=$(date +"%Y-%m-%d %H:%M:%S")

# Backup the schema to /opt/backup
pg_dump -h localhost -U deployadmin -d citus -n mepstg --schema="$original_schema" > "$backup_location/mepstg_schema_backup.sql"

# Replace the original schema name with the new schema name in the SQL file
sed -i "s/$original_schema/$new_schema/g" "$backup_location/mepstg_schema_backup.sql"

# Drop target schema if already exists
psql -h localhost -U deployadmin -d citus -c "DROP SCHEMA IF EXISTS $new_schema CASCADE;"

# Create the target schema
psql -h localhost -U deployadmin -d citus -c "CREATE SCHEMA IF NOT EXISTS $new_schema;"

# Restore the schema within the same database using psql
psql -h localhost -U deployadmin -d citus -f "$backup_location/mepstg_schema_backup.sql"

# Check the status of the restore operation
if [ $? -eq 0 ]; then
  echo "Restore completed successfully."
else
  echo "Error: Restore operation failed."
fi

# Record the completion time
end_time=$(date +"%Y-%m-%d %H:%M:%S")

# Output the start and completion times to a log file
echo "Start Time: $start_time" > "$log_location"
echo "Completion Time: $end_time" >> "$log_location"

# Display the log file path
echo "Backup and restore completed. Log file: $log_location"

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The script bellow will use parallelism to make the dump and restore faster and also do aanlyze on the tables as table stats changes after vacuum.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#!/bin/bash

# Source the environment file
source /opt/app/localhome/postgres/pg_env.sh

# Specify backup and log file locations
backup_location="/opt/backup"
log_location="/opt/backup/schemabackup_restore_log.txt"
original_schema="mepstg"  # Replace with your original schema name
new_schema="newmepstg"    # Replace with your desired new schema name
parallelism=2             # Set the desired level of parallelism

# Record the start time
start_time=$(date +"%Y-%m-%d %H:%M:%S")

# Backup the schema with parallelism to /opt/backup
pg_dump -h localhost -U deployadmin -d citus -n "$original_schema" --schema="$original_schema" -j "$parallelism" > "$backup_location/mepstg_schema_backup.sql"

# Replace the original schema name with the new schema name in the SQL file
sed -i "s/$original_schema/$new_schema/g" "$backup_location/mepstg_schema_backup.sql"

# Drop target schema if already exists
psql -h localhost -U deployadmin -d citus -c "DROP SCHEMA IF EXISTS $new_schema CASCADE;"

# Create the target schema
psql -h localhost -U deployadmin -d citus -c "CREATE SCHEMA IF NOT EXISTS $new_schema;"

# Restore the schema with parallelism within the same database using psql
psql -h localhost -U deployadmin -d citus -f "$backup_location/mepstg_schema_backup.sql" -j "$parallelism"

# Check the status of the restore operation
if [ $? -eq 0 ]; then
  echo "Restore completed successfully."
else
  echo "Error: Restore operation failed."
fi

# Analyze the tables within the restored schema
tables_to_analyze=$(psql -h localhost -U deployadmin -d citus -t -c "SELECT table_name FROM information_schema.tables WHERE table_schema = '$new_schema';")
for table in $tables_to_analyze; do
  psql -h localhost -U deployadmin -d citus -c "ANALYZE VERBOSE $new_schema.$table;"
done

# Record the completion time
end_time=$(date +"%Y-%m-%d %H:%M:%S")

# Output the start and completion times to a log file
echo "Start Time: $start_time" > "$log_location"
echo "Completion Time: $end_time" >> "$log_location"

# Display the log file path
echo "Backup, restore, and analyze completed. Log file: $log_location"

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The script bellow will use the most recent schema backup to use for restore
--------------------------------------------------------------------------------------------------------------------------------------------------------

#!/bin/bash

# Source the environment file
source /opt/app/localhome/postgres/pg_env.sh

# Specify backup and log file locations
backup_location="/opt/backup"
log_location="/opt/backup/schemabackup_restore_log.txt"
original_schema="mepstg"  # Replace with your original schema name
new_schema="newmepstg"    # Replace with your desired new schema name
parallelism=2             # Set the desired level of parallelism according to cpu cores

# Identify the most recent backup file
most_recent_backup=$(ls -1t "$backup_location"/mepstg_schema_backup_*.sql | head -n 1)

if [ -z "$most_recent_backup" ]; then
  echo "Error: No backup files found in $backup_location."
  exit 1
fi

# Record the start time
start_time=$(date +"%Y-%m-%d %H:%M:%S")

# Replace the original schema name with the new schema name in the SQL file
sed -i "s/$original_schema/$new_schema/g" "$most_recent_backup"

# Drop target schema if already exists
psql -h localhost -U deployadmin -d citus -c "DROP SCHEMA IF EXISTS $new_schema CASCADE;"

# Create the target schema
psql -h localhost -U deployadmin -d citus -c "CREATE SCHEMA IF NOT EXISTS $new_schema;"

# Restore the schema with parallelism within the same database using psql
psql -h localhost -U deployadmin -d citus -f "$most_recent_backup" -j "$parallelism"

# Check the status of the restore operation
if [ $? -eq 0 ]; then
  echo "Restore completed successfully."
else
  echo "Error: Restore operation failed."
fi

# Analyze the tables within the restored schema
tables_to_analyze=$(psql -h localhost -U deployadmin -d citus -t -c "SELECT table_name FROM information_schema.tables WHERE table_schema = '$new_schema';")
for table in $tables_to_analyze; do
  psql -h localhost -U deployadmin -d citus -c "ANALYZE VERBOSE $new_schema.$table;"
done

# Record the completion time
end_time=$(date +"%Y-%m-%d %H:%M:%S")

# Output the start and completion times to a log file
echo "Start Time: $start_time" > "$log_location"
echo "Completion Time: $end_time" >> "$log_location"

# Display the log file path
echo "Restore and analyze completed. Log file: $log_location"

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#!/bin/bash

# Source the environment file
source /opt/app/localhome/postgres/pg_env.sh

# Specify backup and log file locations
backup_location="/opt/backup"
log_location="/opt/backup/schemabackup_restore_log.txt"
original_schema="mepstg"  # Replace with your original schema name
new_schema="newmepstg"    # Replace with your desired new schema name
parallelism=4             # Set the desired level of parallelism

# Record the start time
start_time=$(date +"%Y%m%d%H%M%S")
backup_file="$backup_location/mepstg_schema_backup_$start_time.sql"

# Backup the schema with parallelism
pg_dump -h localhost -U deployadmin -d citus -n "$original_schema" --schema="$original_schema" -j "$parallelism" > "$backup_file"

# Replace the original schema name with the new schema name in the SQL file
sed -i "s/$original_schema/$new_schema/g" "$backup_file"

# Drop target schema if already exists
psql -h localhost -U deployadmin -d citus -c "DROP SCHEMA IF EXISTS $new_schema CASCADE;"

# Create the target schema
psql -h localhost -U deployadmin -d citus -c "CREATE SCHEMA IF NOT EXISTS $new_schema;"

# Restore the schema with parallelism within the same database using psql
psql -h localhost -U deployadmin -d citus -f "$backup_file" -j "$parallelism"

# Check the status of the restore operation
if [ $? -eq 0 ]; then
  echo "Restore completed successfully."
else
  echo "Error: Restore operation failed."
fi

# Analyze the tables within the restored schema
tables_to_analyze=$(psql -h localhost -U deployadmin -d citus -t -c "SELECT table_name FROM information_schema.tables WHERE table_schema = '$new_schema';")
for table in $tables_to_analyze; do
  psql -h localhost -U deployadmin -d citus -c "ANALYZE VERBOSE $new_schema.$table;"
done

# Record the completion time
end_time=$(date +"%Y-%m-%d %H:%M:%S")

# Output the start and completion times to a log file
echo "Start Time: $start_time" > "$log_location"
echo "Completion Time: $end_time" >> "$log_location"

# Display the log file path
echo "Backup, restore, and analyze completed. Log file: $log_location"




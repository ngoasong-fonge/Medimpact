

#!/bin/bash

# Source the environment file
source /opt/app/localhome/postgres/pg_env.sh

# Specify backup and log file locations
backup_location="/opt/backup"
log_location="/opt/backup/schemabackup_restore_log.txt"
original_schema="mepstg"  # Replace with your original schema name
new_schema="newngmep"    # Replace with your desired new schema name

# Record the start time
start_time=$(date +"%Y-%m-%d %H:%M:%S")

# Backup the schema to /opt/backup
pg_dump -h localhost -U deployadmin -d citus -n mepstg --schema="$original_schema" > "$backup_location/mepstg_schema_backup.sql"

# Replace the original schema name with the new schema name in the SQL file
sed -i "s/$original_schema/$new_schema/g" "$backup_location/mepstg_schema_backup.sql"

# Drop target schema if already exists
psql -h localhost -U deployadmin -d citus -c "DROP SCHEMA IF EXISTS $new_schema CASCADE;"

# Create the target schema
psql -h localhost -U deployadmin -d citus -c "CREATE SCHEMA IF NOT EXISTS $new_schema;"

# Restore the schema within the same database using psql
psql -h localhost -U deployadmin -d citus -f "$backup_location/mepstg_schema_backup.sql"

# Check the status of the restore operation
if [ $? -eq 0 ]; then
  echo "Restore completed successfully."
else
  echo "Error: Restore operation failed."
fi

# Record the completion time
end_time=$(date +"%Y-%m-%d %H:%M:%S")

# Output the start and completion times to a log file
echo "Start Time: $start_time" > "$log_location"
echo "Completion Time: $end_time" >> "$log_location"

# Display the log file path
echo "Backup and restore completed. Log file: $log_location"

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The bellow script does backup , restore and analyze verbose the tables at the end
----------------------------------------------------------------------------------------------------------------------------------------------------

#!/bin/bash

# Source the environment file
source /opt/app/localhome/postgres/pg_env.sh

# Specify backup and log file locations
backup_location="/opt/backup"
log_location="/opt/backup/schemabackup_restore_log.txt"
original_schema="mepstg"  # Replace with your original schema name
new_schema="newmepstg"    # Replace with your desired new schema name

# Record the start time
start_time=$(date +"%Y%m%d%H%M%S")
backup_file="$backup_location/mepstg_schema_backup_$start_time.sql"

# Backup the schema
pg_dump -h localhost -U deployadmin -d citus -n "$original_schema" --schema="$original_schema" > "$backup_file"

# Replace the original schema name with the new schema name in the SQL file
sed -i "s/$original_schema/$new_schema/g" "$backup_file"

# Drop target schema if already exists
psql -h localhost -U deployadmin -d citus -c "DROP SCHEMA IF EXISTS $new_schema CASCADE;"

# Create the target schema
psql -h localhost -U deployadmin -d citus -c "CREATE SCHEMA IF NOT EXISTS $new_schema;"

# Restore the schema within the same database using psql
psql -h localhost -U deployadmin -d citus -f "$backup_file"

# Check the status of the restore operation
if [ $? -eq 0 ]; then
  echo "Restore completed successfully."
else
  echo "Error: Restore operation failed."
fi

# Analyze the tables within the restored schema
tables_to_analyze=$(psql -h localhost -U deployadmin -d citus -t -c "SELECT table_name FROM information_schema.tables WHERE table_schema = '$new_schema';")
for table in $tables_to_analyze; do
  psql -h localhost -U deployadmin -d citus -c "ANALYZE VERBOSE $new_schema.$table;"
done

# Record the completion time
end_time=$(date +"%Y-%m-%d %H:%M:%S")

# Output the start and completion times to a log file
echo "Start Time: $start_time" > "$log_location"
echo "Completion Time: $end_time" >> "$log_location"

# Display the log file path
echo "Backup, restore, and analyze completed. Log file: $log_location"

-------------------------------------------------------------------------------------------------------------------------------------------------------------
Bellow is a script that does backup of just original schema with .sql format
----------------------------------------------------------------------------------------------------------------------------------------------------
#!/bin/bash

# Source the environment file
source /opt/app/localhome/svcpostgres/pg_env.sh

# Specify backup and log file locations
backup_location="/opt/backup"
log_location="/opt/backup/schemabackup_log.txt"
original_schema="ngmep"  # Replace with your original schema name

# Record the start time
start_time=$(date +"%Y-%m-%d %H:%M:%S")

# Backup the schema without parallelism
pg_dump -h localhost -U deployadmin -d citus -n "$original_schema" --schema="$original_schema" > "$backup_location/$original_schema"_backup.sql

# Check the status of the backup operation
if [ $? -eq 0 ]; then
  echo "Backup completed successfully."
else
  echo "Error: Backup operation failed."
fi

# Record the completion time
end_time=$(date +"%Y-%m-%d %H:%M:%S")

# Output the start and completion times to a log file
echo "Start Time: $start_time" > "$log_location"
echo "Completion Time: $end_time" >> "$log_location"

# Display the log file path
echo "Backup completed. Log file: $log_location"


---------------------------------------------------------------------------------------------------------------------------------------------------
The script bellow will create the schema with a new name by using sed command
--------------------------------------------------------------------------------------------------------------

#!/bin/bash

# Source the environment file
source /opt/app/localhome/svcpostgres/pg_env.sh

# Specify backup file location
backup_location="/opt/backup"
log_location="/opt/backup/restore_log.txt"
original_schema="ngmep"  # Replace with your original schema name
new_schema="newngmep"    # Replace with your desired new schema name

# Record the start time
start_time=$(date +"%Y-%m-%d %H:%M:%S")

# Drop the target schema if it already exists
psql -h localhost -U deployadmin -d citus -c "DROP SCHEMA IF EXISTS $new_schema CASCADE"

# Create the target schema
psql -h localhost -U deployadmin -d citus -c "CREATE SCHEMA IF NOT EXISTS $new_schema;"

# Replace the original schema name with the new schema name in the SQL file
backup_file="$backup_location/$original_schema"_backup.sql
sed -i "s/$original_schema/$new_schema/g" "$backup_file"

# Restore the schema using psql with a new schema name
psql -h localhost -U deployadmin -d citus -f "$backup_file" -v new_schema="$new_schema"

# Check the status of the restore operation
if [ $? -eq 0 ]; then
  echo "Restore completed successfully."
else
  echo "Error: Restore operation failed."
fi

# Record the completion time
end_time=$(date +"%Y-%m-%d %H:%M:%S")

# Output the start and completion times to the log file
echo "Start Time: $start_time" > "$log_location"
echo "Completion Time: $end_time" >> "$log_location"

# Display the log file path
echo "Restore completed. Log file: $log_location"


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
backup with every backup file having a unique name in the backup location. This modified backup script adds a timestamp to the backup file name, ensuring each backup has a unique name in the specified backup location
----------------------------------------------------------------------------------------------------------------------------


#!/bin/bash

# Source the environment file
source /opt/app/localhome/svcpostgres/pg_env.sh

# Specify backup file location
backup_location="/opt/backup"
log_location="/opt/backup/backup_log.txt"
original_schema="ngmep"  # Replace with your original schema name
timestamp=$(date +"%Y%m%d%H%M%S")
backup_file="$backup_location/${original_schema}_backup_${timestamp}.sql"

# Record the start time
start_time=$(date +"%Y-%m-%d %H:%M:%S")

# Backup the schema without parallelism
pg_dump -h localhost -U deployadmin -d citus -n "$original_schema" --schema="$original_schema" > "$backup_file"

# Check the status of the backup operation
if [ $? -eq 0 ]; then
  echo "Backup completed successfully. Backup file: $backup_file"
else
  echo "Error: Backup operation failed."
fi

# Record the completion time
end_time=$(date +"%Y-%m-%d %H:%M:%S")

# Output the start and completion times to a log file
echo "Start Time: $start_time" > "$log_location"
echo "Completion Time: $end_time" >> "$log_location"

# Display the log file path
echo "Backup completed. Log file: $log_location"


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

using the most recent backupfile to restore while using sed to rename schema. This modified restore script uses ls to find the most recent backup file in the backup location, and then proceeds with the restore operation. 
The sed command is used to replace the original schema name with the new schema name in the SQL file before restoring it.
------------------------------------------------------------------------------------------


#!/bin/bash

# Source the environment file
source /opt/app/localhome/svcpostgres/pg_env.sh

# Specify backup and log file locations
backup_location="/opt/backup"
log_location="/opt/backup/restore_log.txt"
original_schema="ngmep"  # Replace with your original schema name
new_schema="newngmep"    # Replace with your desired new schema name

# Find the most recent backup file
latest_backup=$(ls -t "$backup_location/${original_schema}_backup_"*".sql" | head -n1)

# Record the start time
start_time=$(date +"%Y-%m-%d %H:%M:%S")

# Drop the target schema if it already exists
psql -h localhost -U deployadmin -d citus -c "DROP SCHEMA IF EXISTS $new_schema CASCADE"

# Create the target schema
psql -h localhost -U deployadmin -d citus -c "CREATE SCHEMA IF NOT EXISTS $new_schema;"

# Replace the original schema name with the new schema name in the SQL file
sed -i "s/$original_schema/$new_schema/g" "$latest_backup"

# Restore the schema using psql with a new schema name
psql -h localhost -U deployadmin -d citus -f "$latest_backup" -v new_schema="$new_schema"

# Check the status of the restore operation
if [ $? -eq 0 ]; then
  echo "Restore completed successfully. Using backup file: $latest_backup"
else
  echo "Error: Restore operation failed."
fi

# Record the completion time
end_time=$(date +"%Y-%m-%d %H:%M:%S")

# Output the start and completion times to the log file
echo "Start Time: $start_time" > "$log_location"
echo "Completion Time: $end_time" >> "$log_location"

# Display the log file path
echo "Restore completed. Log file: $log_location"

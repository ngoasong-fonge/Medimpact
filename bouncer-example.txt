[databases]
db1 = host=1.1.1.1 port=5432 dbname=db1 user=db1_user
db2 = host=1.1.1.1 port=5432 dbname=db2 user=db2_user

[pgbouncer]
listen_addr = 1.1.1.1
listen_port = 3333
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt
admin_users = admin_user
pool_mode = transaction
max_client_conn = 1000
default_pool_size = 20
logfile = /var/log/pgbouncer/pgbouncer.log
pidfile = /var/log/pgbouncer/pgbouncer.pid
unix_socket_dir = /tmp
ignore_startup_parameters = extra_float_digits


====================================
WITH SchemaSize AS (
  SELECT 
    ps.nspname AS schema_name,
    SUM(pg_total_relation_size(pc.oid)) AS total_size
  FROM 
    pg_class pc
  JOIN 
    pg_catalog.pg_namespace ps ON ps.oid = pc.relnamespace
  GROUP BY 
    ps.nspname
)
SELECT 
  ss.schema_name,
  pg_size_pretty(ss.total_size) AS total_size_pretty
FROM 
  SchemaSize ss
ORDER BY 
  ss.total_size DESC
LIMIT 10;


======================


Considering the workaround above can you create bellow two tables smartiq.account and smartiq.account_hist using the table definition I provided and distribute based on your suggested key column, and try to use the trigger trg_account_hist modifying it so it can be created on a shard distributed scenario  


CREATE TABLE IF NOT EXISTS smartiq.account
(
    account_id bigint NOT NULL DEFAULT nextval('smartiq.account_account_id_seq'::regclass),
    entered timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    entered_by character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT CURRENT_USER,
    client_id bigint NOT NULL,
    account_name character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    account_code character varying(1000) COLLATE pg_catalog."default",
    account_desc character varying(9000) COLLATE pg_catalog."default",
    account_type smallint NOT NULL,
    status smallint NOT NULL,
    version integer NOT NULL,
    effective_date timestamp without time zone,
    CONSTRAINT account_pkey PRIMARY KEY (account_id),
    CONSTRAINT dfk_account_client FOREIGN KEY (client_id)
        REFERENCES smartiq.client (client_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;


CREATE OR REPLACE TRIGGER trg_account_hist
    AFTER INSERT OR DELETE OR UPDATE 
    ON smartiq.account
    FOR EACH ROW
    EXECUTE FUNCTION smartiq.tfn_account_hist();


CREATE TABLE IF NOT EXISTS smartiq.account_hist
(
    account_hist_id bigint NOT NULL DEFAULT nextval('smartiq.account_hist_account_hist_id_seq'::regclass),
    entered timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    entered_by character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT CURRENT_USER,
    replaced timestamp without time zone NOT NULL,
    replaced_by character varying(100) COLLATE pg_catalog."default",
    account_id bigint NOT NULL,
    client_id bigint NOT NULL,
    account_name character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    account_code character varying(1000) COLLATE pg_catalog."default",
    account_desc character varying(9000) COLLATE pg_catalog."default",
    account_type smallint NOT NULL,
    status smallint NOT NULL,
    version integer NOT NULL,
    effective_date timestamp without time zone,
    CONSTRAINT account_hist_pkey PRIMARY KEY (account_hist_id)
)

TABLESPACE pg_default;

[databases]
db1 = host=1.1.1.1 port=5432 dbname=db1 user=db1_user
db2 = host=1.1.1.1 port=5432 dbname=db2 user=db2_user

[pgbouncer]
listen_addr = 1.1.1.1
listen_port = 3333
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt
admin_users = admin_user
pool_mode = transaction
max_client_conn = 1000
default_pool_size = 20
logfile = /var/log/pgbouncer/pgbouncer.log
pidfile = /var/log/pgbouncer/pgbouncer.pid
unix_socket_dir = /tmp
ignore_startup_parameters = extra_float_digits


ERROR:  value too long for type character varying(500)
CONTEXT:  COPY salesforce_a_g_detail, line 377, column corrective_and_preventative_action__c: "Determine whether we can include tracking on all plan materials moving fwd so we can confirm that ma..."

ALTER TABLE salesforce_a_g_detail ALTER COLUMN corrective_and_preventative_action__c TYPE character varying(1000);

Modify the Table Schema:
Alter the column to increase its length to accommodate the longer values.
Preprocess the CSV File:
Truncate the data in the CSV file to fit within the existing column length constraints.

https://get.enterprisedb.com/docs/EDB_Failover_Manager_Guide_v3.5.pdf










Script Explanation
bash
Copy code
#!/bin/bash
•	This line is known as a "shebang" and indicates that the script should be run using the Bash shell.
bash
Copy code
NEW_PRIMARY_IP=$1
•	This line assigns the first argument passed to the script to the variable NEW_PRIMARY_IP. When you run the script, you can pass the new primary IP address as an argument.
bash
Copy code
DNS_SERVER="your_dns_server_ip"
ZONE="example.com"
RECORD="db.example.com"
TTL=60
•	These lines define several variables:
o	DNS_SERVER: The IP address of the DNS server you want to update.
o	ZONE: The DNS zone you are working with, in this case, example.com.
o	RECORD: The DNS record you want to update, here db.example.com.
o	TTL: The Time to Live value for the DNS record, set to 60 seconds. This means the DNS record should be cached for 60 seconds before querying the DNS server again.
bash
Copy code
# Update DNS record using nsupdate
nsupdate << EOF
•	This line starts a here document (a multi-line string that will be passed to the nsupdate command).
•	nsupdate is a utility used to submit Dynamic DNS Update requests.
bash
Copy code
server $DNS_SERVER
zone $ZONE
update delete $RECORD CNAME
update add $RECORD $TTL CNAME primary-db.example.com
send
EOF
•	This block contains the commands for nsupdate:
o	server $DNS_SERVER: Specifies the DNS server to which the update request should be sent.
o	zone $ZONE: Specifies the DNS zone being updated.
o	update delete $RECORD CNAME: Deletes the existing CNAME record for db.example.com.
o	update add $RECORD $TTL CNAME primary-db.example.com: Adds a new CNAME record for db.example.com pointing to primary-db.example.com with a TTL of 60 seconds.
o	send: Sends the update request to the DNS server.
•	The EOF marks the end of the here document.
Overall Purpose of the Script
The purpose of this script is to update the DNS record for db.example.com to point to the new primary database server after a failover. Specifically, it:
1.	Takes the new primary IP address as an input argument (though the script currently doesn't use NEW_PRIMARY_IP directly).
2.	Uses the nsupdate utility to modify the DNS zone example.com.
3.	Deletes the existing CNAME record for db.example.com.
4.	Adds a new CNAME record pointing db.example.com to primary-db.example.com with a TTL of 60 seconds.
Example Usage
To run the script, you would execute it with the new primary IP address as an argument:
sh
Copy code
./update_dns_failover.sh 192.168.1.100
This would update the DNS record as described, ensuring that db.example.com points to the new primary database server.
Improvements
If you want to use NEW_PRIMARY_IP directly in the DNS update, you can modify the script to update an A record instead of a CNAME record:
bash
Copy code
#!/bin/bash

NEW_PRIMARY_IP=$1
DNS_SERVER="your_dns_server_ip"
ZONE="example.com"
RECORD="db.example.com"
TTL=60

# Update DNS record using nsupdate
nsupdate << EOF
server $DNS_SERVER
zone $ZONE
update delete $RECORD A
update add $RECORD $TTL A $NEW_PRIMARY_IP
send
EOF
In this modified version, the script:
1.	Deletes the existing A record for db.example.com.
2.	Adds a new A record pointing db.example.com to the new primary IP address ($NEW_PRIMARY_IP).

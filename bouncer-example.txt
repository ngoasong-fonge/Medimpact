[databases]
db1 = host=1.1.1.1 port=5432 dbname=db1 user=db1_user
db2 = host=1.1.1.1 port=5432 dbname=db2 user=db2_user

[pgbouncer]
listen_addr = 1.1.1.1
listen_port = 3333
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt
admin_users = admin_user
pool_mode = transaction
max_client_conn = 1000
default_pool_size = 20
logfile = /var/log/pgbouncer/pgbouncer.log
pidfile = /var/log/pgbouncer/pgbouncer.pid
unix_socket_dir = /tmp
ignore_startup_parameters = extra_float_digits


ERROR:  value too long for type character varying(500)
CONTEXT:  COPY salesforce_a_g_detail, line 377, column corrective_and_preventative_action__c: "Determine whether we can include tracking on all plan materials moving fwd so we can confirm that ma..."

ALTER TABLE salesforce_a_g_detail ALTER COLUMN corrective_and_preventative_action__c TYPE character varying(1000);

Modify the Table Schema:
Alter the column to increase its length to accommodate the longer values.
Preprocess the CSV File:
Truncate the data in the CSV file to fit within the existing column length constraints.

https://get.enterprisedb.com/docs/EDB_Failover_Manager_Guide_v3.5.pdf










Yes, you can configure EnterpriseDB Failover Manager (EFM) to use a CNAME that points to the primary database and update the DNS to point to the standby after a switchover or failover. This method avoids using PgBouncer and leverages DNS updates to ensure that client applications connect to the correct primary node.
Here’s a step-by-step guide on how to achieve this:
Steps to Configure EFM with CNAME and Update DNS
1.	Set Up Initial DNS Configuration
2.	Configure EFM for Failover
3.	Create a Failover Script to Update DNS
4.	Integrate the Failover Script with EFM
5.	Client Application Configuration
1. Set Up Initial DNS Configuration
1.	Create a CNAME Record:
o	Create a CNAME record in your DNS that points to the current primary database node.
Example:
•	db.example.com -> primary-db.example.com
2.	Initial DNS Setup:
o	Ensure primary-db.example.com points to the IP address of the primary node.
o	Ensure standby-db.example.com points to the IP address of the standby node.
2. Configure EFM for Failover
1.	Install and Configure EFM:
o	Follow the EFM installation and configuration steps on both primary and standby nodes.
Example efm.properties Configuration:
properties
Copy code
db.user=efm
db.password=efm_password
db.port=5432
db.serviceOwner=postgres
db.reuseConnection=true

# Define the cluster members
node1.host=primary-db.example.com
node2.host=standby-db.example.com

# Script to run on failover
failoverScript=/path/to/update_dns_failover.sh
3. Create a Failover Script to Update DNS
Create a script that will update the CNAME to point to the new primary node upon failover.
Example Failover Script (update_dns_failover.sh):
sh
Copy code
#!/bin/bash

NEW_PRIMARY_IP=$1
DNS_SERVER="your_dns_server_ip"
ZONE="example.com"
RECORD="db.example.com"
TTL=60

# Update DNS record using nsupdate
nsupdate << EOF
server $DNS_SERVER
zone $ZONE
update delete $RECORD CNAME
update add $RECORD $TTL CNAME primary-db.example.com
send
EOF
Note: Replace primary-db.example.com with the appropriate hostname or IP address. Adjust the script according to your DNS server and tools.
4. Integrate the Failover Script with EFM
Add the failover script path to the EFM configuration file (efm.properties):
properties
Copy code
failoverScript=/path/to/update_dns_failover.sh
5. Client Application Configuration
Configure your client applications to connect to the CNAME (db.example.com). This ensures that clients always connect to the primary node, as defined by the CNAME record.
Example Connection String:
jdbc:postgresql://db.example.com:5432/mydatabase

[databases]
db1 = host=1.1.1.1 port=5432 dbname=db1 user=db1_user
db2 = host=1.1.1.1 port=5432 dbname=db2 user=db2_user

[pgbouncer]
listen_addr = 1.1.1.1
listen_port = 3333
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt
admin_users = admin_user
pool_mode = transaction
max_client_conn = 1000
default_pool_size = 20
logfile = /var/log/pgbouncer/pgbouncer.log
pidfile = /var/log/pgbouncer/pgbouncer.pid
unix_socket_dir = /tmp
ignore_startup_parameters = extra_float_digits




-------------------------------------------------------------------

citus=# select * from partman.part_config ;
-[ RECORD 1 ]------------+-------------------------------------------
parent_table             | mepstg.stg_mep_claim_10r
control                  | created
partition_interval       | 7 days
partition_type           | range
premake                  | 4
automatic_maintenance    | on
template_table           | partman.template_mepstg_stg_mep_claim_10r
retention                | 2 week
retention_schema         | archive_schema
retention_keep_index     | t
retention_keep_table     | t
epoch                    | none
constraint_cols          |
optimize_constraint      | 30
infinite_time_partitions | t
datetime_string          | YYYYMMDD
jobmon                   | t
sub_partition_set_full   | f
undo_in_progress         | f
inherit_privileges       | f
constraint_valid         | t
ignore_default_data      | t
default_table            | t
date_trunc_interval      |

citus=# \dt mepstg.*
                            List of relations
 Schema |             Name             |       Type        |    Owner
--------+------------------------------+-------------------+-------------
 mepstg | stg_mep_claim_10r            | partitioned table | deployadmin
 mepstg | stg_mep_claim_10r_default    | table             | deployadmin
 mepstg | stg_mep_claim_10r_old        | table             | deployadmin
 mepstg | stg_mep_claim_10r_p20240526  | table             | deployadmin
 mepstg | stg_mep_claim_10r_p20240602  | table             | deployadmin
 mepstg | stg_mep_claim_10r_p20240609  | table             | deployadmin
 mepstg | stg_mep_claim_10r_p20240616  | table             | deployadmin
 mepstg | stg_mep_claim_10r_p20240623  | table             | deployadmin
 mepstg | stg_mep_claim_10r_p20240630  | table             | deployadmin
 mepstg | stg_mep_claim_10r_p20240707  | table             | deployadmin
 mepstg | stg_mep_claim_10r_p20240714  | table             | deployadmin

------------------------------------------------------

parent_table             | mepstg.stg_mep_claim_15r
control                  | created
partition_interval       | 7 days
partition_type           | range
premake                  | 4
automatic_maintenance    | on
template_table           | partman.template_mepstg_stg_mep_claim_15r
retention                | 4 week
retention_schema         | archive_schema
retention_keep_index     | t
retention_keep_table     | t
epoch                    | none
constraint_cols          |
optimize_constraint      | 30
infinite_time_partitions | t
datetime_string          | YYYYMMDD
jobmon                   | t
sub_partition_set_full   | f
undo_in_progress         | f
inherit_privileges       | f
constraint_valid         | t
ignore_default_data      | t
default_table            | t

 mepstg | stg_mep_claim_15r             | partitioned table | deployadmin
 mepstg | stg_mep_claim_15r_default     | table             | postgres
 mepstg | stg_mep_claim_15r_old         | table             | deployadmin
 mepstg | stg_mep_claim_15r_p20240324   | table             | postgres

----------------------------------------------------------------------------------------------

Step 1: Verify Existing Data in Default Partition
First, check if there's data in the default partition that needs to be redistributed to the new partitions.

SELECT COUNT(*), MIN(created), MAX(created) 
FROM mepstg.stg_mep_claim_10r_default;

Step 2: Manually Create the Missing Partitions
Manually create the missing partitions for future dates based on your current date (2024-08-05) and the partition interval.

DO $$
DECLARE
    start_date DATE := '2024-07-15';  -- This should be the day after the last partition date.
    end_date DATE;
BEGIN
    WHILE start_date <= '2024-08-05' + INTERVAL '4 weeks' LOOP
        end_date := start_date + INTERVAL '7 days';
        EXECUTE format('CREATE TABLE IF NOT EXISTS mepstg.stg_mep_claim_10r_p%s PARTITION OF mepstg.stg_mep_claim_10r FOR VALUES FROM (%L) TO (%L)', 
                       to_char(start_date, 'YYYYMMDD'), start_date, end_date);
        start_date := end_date;
    END LOOP;
END $$;

Step 3: Move Data from Default Partition to the Correct Partitions
Move the data from the default partition to the newly created partitions.

DO $$
DECLARE
    start_date DATE := '2024-07-15';  -- This should be the day after the last partition date.
    end_date DATE;
BEGIN
    WHILE start_date <= '2024-08-05' LOOP
        end_date := start_date + INTERVAL '7 days';
        EXECUTE format('INSERT INTO mepstg.stg_mep_claim_10r_p%s SELECT * FROM mepstg.stg_mep_claim_10r_default WHERE created >= %L AND created < %L', 
                       to_char(start_date, 'YYYYMMDD'), start_date, end_date);
        EXECUTE format('DELETE FROM mepstg.stg_mep_claim_10r_default WHERE created >= %L AND created < %L', start_date, end_date);
        start_date := end_date;
    END LOOP;
END $$;



-----------------------------

Given today's date of 2024-08-05 and the existing partitions up to mepstg.stg_mep_claim_10r_p20240714, let's determine how many additional partitions need to be manually created.

The configuration states that partitions are created for a 7-day interval, and the premake setting is set to 4. This means you should have partitions premade for up to 4 weeks into the future.

Current Situation:
Last existing partition: mepstg.stg_mep_claim_10r_p20240714
Each partition covers a 7-day interval.
Premake setting: 4 partitions (4 weeks ahead).
Missing Partitions:
From 2024-07-15 to 2024-07-21
From 2024-07-22 to 2024-07-28
From 2024-07-29 to 2024-08-04
From 2024-08-05 to 2024-08-11 (premake for the next week)
From 2024-08-12 to 2024-08-18 (premake for the next week)
From 2024-08-19 to 2024-08-25 (premake for the next week)
From 2024-08-26 to 2024-09-01 (premake for the next week)
So, a total of 7 new partitions need to be created manually.

Creating the Missing Partitions:
DO $$
DECLARE
    start_date DATE := '2024-07-15';
    end_date DATE;
BEGIN
    WHILE start_date <= '2024-08-26' LOOP
        end_date := start_date + INTERVAL '7 days';
        EXECUTE format('CREATE TABLE IF NOT EXISTS mepstg.stg_mep_claim_10r_p%s PARTITION OF mepstg.stg_mep_claim_10r FOR VALUES FROM (%L) TO (%L)', 
                       to_char(start_date, 'YYYYMMDD'), start_date, end_date);
        start_date := end_date;
    END LOOP;
END $$;


Summary:
Create 7 new partitions covering the period from 2024-07-15 to 2024-09-01.
Ensure data from the default partition is redistributed into the correct partitions if necessary.
Run partman.run_maintenance to maintain future partition creation.
If you follow these steps, you should be able to create the necessary partitions manually and ensure smooth partition maintenance for the future. If you need further assistance or encounter any issues, feel free to ask!

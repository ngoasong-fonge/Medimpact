[databases]
db1 = host=1.1.1.1 port=5432 dbname=db1 user=db1_user
db2 = host=1.1.1.1 port=5432 dbname=db2 user=db2_user

[pgbouncer]
listen_addr = 1.1.1.1
listen_port = 3333
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt
admin_users = admin_user
pool_mode = transaction
max_client_conn = 1000
default_pool_size = 20
logfile = /var/log/pgbouncer/pgbouncer.log
pidfile = /var/log/pgbouncer/pgbouncer.pid
unix_socket_dir = /tmp
ignore_startup_parameters = extra_float_digits


====================================


CREATE ROLE postgres WITH LOGIN SUPERUSER CREATEDB CREATEROLE REPLICATION BYPASSRLS PASSWORD 'your_password';
Explanation of the Privileges:
LOGIN: Allows the user to log in.
SUPERUSER: Grants superuser privileges.
CREATEDB: Allows the user to create new databases.
CREATEROLE: Allows the user to create and manage roles.
REPLICATION: Allows the user to manage replication.
BYPASSRLS: Allows the user to bypass row-level security policies.
After running this command, the postgres user will have the same privileges as the svcpostgres user.


psql -U svcpostgres -d postgres

ALTER DATABASE postgres OWNER TO postgres;
ALTER DATABASE template0 OWNER TO postgres;
ALTER DATABASE template1 OWNER TO postgres;

Once you have confirmed that svcpostgres no longer owns any critical system databases, you can attempt to drop the role:

DROP ROLE svcpostgres;

psql -U postgres -d postgres -c "DROP ROLE svcpostgres;"


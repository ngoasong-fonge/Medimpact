[databases]
db1 = host=1.1.1.1 port=5432 dbname=db1 user=db1_user
db2 = host=1.1.1.1 port=5432 dbname=db2 user=db2_user

[pgbouncer]
listen_addr = 1.1.1.1
listen_port = 3333
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt
admin_users = admin_user
pool_mode = transaction
max_client_conn = 1000
default_pool_size = 20
logfile = /var/log/pgbouncer/pgbouncer.log
pidfile = /var/log/pgbouncer/pgbouncer.pid
unix_socket_dir = /tmp
ignore_startup_parameters = extra_float_digits


====================================


psql 'host=10.13.102.119 user=repmgr dbname=repmgr connect_timeout=2'

==================================

the script should be set up on both the primary and standby nodes. Here's why:

Replication Events Can Occur on Any Node: Events that require notification, such as failovers, switchovers, or other replication-related activities, can occur on either the primary or any of the standby nodes. To ensure that you are notified of these events regardless of where they occur, the script needs to be available and configured on all nodes involved in the replication setup.

Consistency Across Nodes: By setting up the script on both the primary and standby nodes, you ensure consistent monitoring and notification behavior across your entire PostgreSQL replication environment. This is crucial for maintaining a reliable and responsive replication system.

Modify the event_notification_command parameter in the repmgr.conf file on each node to point to the script:
event_notification_command='/path/to/repmgr_event_notification.sh %n %e %s "%t" "%d"'

Make sure the script is executable on all nodes:
chmod +x /path/to/repmgr_event_notification.sh

After updating repmgr.conf, restart the repmgrd daemon on each node to apply the changes:
